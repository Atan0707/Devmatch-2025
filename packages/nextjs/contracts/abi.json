{
    "address": "0x581cBC507994764bccB70f2e0e79Da24D8D8012B",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_contractOwner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "target",
            "type": "address"
          }
        ],
        "name": "AddressEmptyCode",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "AddressInsufficientBalance",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "FailedInnerCall",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ReentrancyGuardReentrantCall",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "SafeERC20FailedOperation",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "string",
            "name": "url",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "ContentDeactivated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "string",
            "name": "url",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "ContentReactivated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "string",
            "name": "url",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "ContentRegistered",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "donor",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "contentOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "contentUrl",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "donationId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "DonationMade",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "oldFee",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newFee",
            "type": "uint256"
          }
        ],
        "name": "PlatformFeeUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "symbol",
            "type": "string"
          }
        ],
        "name": "TokenAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "TokenRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "creator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "WithdrawalMade",
        "type": "event"
      },
      {
        "stateMutability": "payable",
        "type": "fallback"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_symbol",
            "type": "string"
          }
        ],
        "name": "addSupportedToken",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "contentDonations",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_url",
            "type": "string"
          }
        ],
        "name": "contentExistsCheck",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "name": "contents",
        "outputs": [
          {
            "internalType": "string",
            "name": "url",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "totalDonationsReceived",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "donationCount",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "isActive",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "createdAt",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "contractOwner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "creatorContents",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "creatorEarnings",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_url",
            "type": "string"
          }
        ],
        "name": "deactivateContent",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_url",
            "type": "string"
          }
        ],
        "name": "donateToContent",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_url",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "donateTokenToContent",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "donations",
        "outputs": [
          {
            "internalType": "address",
            "name": "donor",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "contentOwner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "contentUrl",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "donorTotalDonations",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_url",
            "type": "string"
          }
        ],
        "name": "getContent",
        "outputs": [
          {
            "internalType": "string",
            "name": "url",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "totalDonationsReceived",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "donationCount",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "isActive",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "createdAt",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_url",
            "type": "string"
          }
        ],
        "name": "getContentDonations",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_creator",
            "type": "address"
          }
        ],
        "name": "getCreatorAllEarnings",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "tokens",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "string[]",
            "name": "symbols",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_creator",
            "type": "address"
          }
        ],
        "name": "getCreatorContents",
        "outputs": [
          {
            "internalType": "string[]",
            "name": "",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_creator",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "getCreatorEarnings",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_donationId",
            "type": "uint256"
          }
        ],
        "name": "getDonation",
        "outputs": [
          {
            "internalType": "address",
            "name": "donor",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "contentOwner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "contentUrl",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_donor",
            "type": "address"
          }
        ],
        "name": "getDonorAllDonations",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "tokens",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "string[]",
            "name": "symbols",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_donor",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "getDonorTotalDonations",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getPlatformStats",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalContentsCount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "totalDonationsCount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "currentPlatformFee",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_url",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "_limit",
            "type": "uint256"
          }
        ],
        "name": "getRecentDonations",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getSupportedTokens",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "tokens",
            "type": "address[]"
          },
          {
            "internalType": "string[]",
            "name": "symbols",
            "type": "string[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "platformFee",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_url",
            "type": "string"
          }
        ],
        "name": "reactivateContent",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_url",
            "type": "string"
          }
        ],
        "name": "registerContent",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "removeSupportedToken",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "supportedTokenList",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "supportedTokens",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "tokenSymbols",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalContents",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalDonations",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_url",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_newOwner",
            "type": "address"
          }
        ],
        "name": "transferContentOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_newFee",
            "type": "uint256"
          }
        ],
        "name": "updatePlatformFee",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawAllEarnings",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawAllPlatformFees",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawEthEarnings",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawPlatformFeesEth",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "withdrawPlatformFeesToken",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          }
        ],
        "name": "withdrawTokenEarnings",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "transactionHash": "0xebe71e3d76558c47f1b1d7d85f77a19c7031a3311bde74f263350f022da424c4",
    "receipt": {
      "to": null,
      "from": "0xE594d66726C49625A381fe7b0FddF66725B5eF26",
      "contractAddress": "0x581cBC507994764bccB70f2e0e79Da24D8D8012B",
      "transactionIndex": 4,
      "gasUsed": "3789487",
      "logsBloom": "0x
      "blockHash": "0x3bedfcb1561bb74a159473ef2082800799e61ace80fee0b68038f22ada1ca806",
      "transactionHash": "0xebe71e3d76558c47f1b1d7d85f77a19c7031a3311bde74f263350f022da424c4",
      "logs": [],
      "blockNumber": 29495390,
      "cumulativeGasUsed": "4309263",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "0xE594d66726C49625A381fe7b0FddF66725B5eF26"
    ],
    "numDeployments": 1,
    "solcInputHash": "f660945d9ae1b1dfcc72b1d223b8bded",
    "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ContentDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ContentReactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ContentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contentUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"donationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DonationMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"WithdrawalMade\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"addSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"contentExistsCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"contents\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDonationsReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorContents\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"deactivateContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"donateToContent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donateTokenToContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contentOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contentUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donorTotalDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"getContent\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDonationsReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"getContentDonations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreatorAllEarnings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreatorContents\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCreatorEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_donationId\",\"type\":\"uint256\"}],\"name\":\"getDonation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contentOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contentUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donor\",\"type\":\"address\"}],\"name\":\"getDonorAllDonations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDonorTotalDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalContentsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDonationsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPlatformFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getRecentDonations\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"reactivateContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"registerContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferContentOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllPlatformFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEthEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPlatformFeesEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawPlatformFeesToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokenEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Pisa\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"addSupportedToken(address,string)\":{\"params\":{\"_symbol\":\"The token symbol for display purposes\",\"_token\":\"The token address to add\"}},\"contentExistsCheck(string)\":{\"params\":{\"_url\":\"The content URL to check\"},\"returns\":{\"_0\":\"bool True if content exists, false otherwise\"}},\"deactivateContent(string)\":{\"params\":{\"_url\":\"The content URL to deactivate\"}},\"donateToContent(string)\":{\"params\":{\"_url\":\"The content URL to donate to\"}},\"donateTokenToContent(string,address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to donate\",\"_token\":\"The token address to donate\",\"_url\":\"The content URL to donate to\"}},\"getContent(string)\":{\"params\":{\"_url\":\"The content URL\"}},\"getContentDonations(string)\":{\"params\":{\"_url\":\"The content URL\"}},\"getCreatorAllEarnings(address)\":{\"params\":{\"_creator\":\"The creator's address\"}},\"getCreatorContents(address)\":{\"params\":{\"_creator\":\"The creator's address\"}},\"getCreatorEarnings(address,address)\":{\"params\":{\"_creator\":\"The creator's address\",\"_token\":\"The token address (address(0) for ETH)\"}},\"getDonation(uint256)\":{\"params\":{\"_donationId\":\"The donation ID\"}},\"getDonorAllDonations(address)\":{\"params\":{\"_donor\":\"The donor's address\"}},\"getDonorTotalDonations(address,address)\":{\"params\":{\"_donor\":\"The donor's address\",\"_token\":\"The token address (address(0) for ETH)\"}},\"getRecentDonations(string,uint256)\":{\"params\":{\"_url\":\"The content URL\"}},\"reactivateContent(string)\":{\"params\":{\"_url\":\"The content URL to reactivate\"}},\"registerContent(string)\":{\"params\":{\"_url\":\"The streaming content URL\"}},\"removeSupportedToken(address)\":{\"params\":{\"_token\":\"The token address to remove\"}},\"transferContentOwnership(string,address)\":{\"params\":{\"_newOwner\":\"The new owner address\",\"_url\":\"The content URL\"}},\"updatePlatformFee(uint256)\":{\"params\":{\"_newFee\":\"New fee in basis points (e.g., 250 = 2.5%)\"}},\"withdrawPlatformFeesToken(address)\":{\"params\":{\"_token\":\"The token address to withdraw fees for\"}},\"withdrawTokenEarnings(address)\":{\"params\":{\"_token\":\"The token address to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSupportedToken(address,string)\":{\"notice\":\"Add a supported token (only contract owner)\"},\"contentExistsCheck(string)\":{\"notice\":\"Check if content exists\"},\"deactivateContent(string)\":{\"notice\":\"Deactivate content (only by content owner)\"},\"donateToContent(string)\":{\"notice\":\"Donate to a specific content\"},\"donateTokenToContent(string,address,uint256)\":{\"notice\":\"Donate tokens to a specific content\"},\"getContent(string)\":{\"notice\":\"Get content information\"},\"getContentDonations(string)\":{\"notice\":\"Get donation IDs for a specific content\"},\"getCreatorAllEarnings(address)\":{\"notice\":\"Get creator earnings for all tokens\"},\"getCreatorContents(address)\":{\"notice\":\"Get all content URLs by a creator\"},\"getCreatorEarnings(address,address)\":{\"notice\":\"Get creator earnings for a specific token\"},\"getDonation(uint256)\":{\"notice\":\"Get donation details by ID\"},\"getDonorAllDonations(address)\":{\"notice\":\"Get donor total donations for all tokens\"},\"getDonorTotalDonations(address,address)\":{\"notice\":\"Get donor total donations for a specific token\"},\"getPlatformStats()\":{\"notice\":\"Get platform statistics\"},\"getRecentDonations(string,uint256)\":{\"notice\":\"Get top donors for a specific content (last 10 donations)\"},\"getSupportedTokens()\":{\"notice\":\"Get all supported tokens\"},\"reactivateContent(string)\":{\"notice\":\"Reactivate content (only by content owner)\"},\"registerContent(string)\":{\"notice\":\"Register a new streaming content URL\"},\"removeSupportedToken(address)\":{\"notice\":\"Remove a supported token (only contract owner)\"},\"transferContentOwnership(string,address)\":{\"notice\":\"Emergency function to transfer content ownership\"},\"updatePlatformFee(uint256)\":{\"notice\":\"Update platform fee (only contract owner)\"},\"withdrawAllEarnings()\":{\"notice\":\"Withdraw all earnings for a creator (ETH + all supported tokens)\"},\"withdrawAllPlatformFees()\":{\"notice\":\"Withdraw all platform fees (ETH + all tokens) (only contract owner)\"},\"withdrawEthEarnings()\":{\"notice\":\"Allow creators to withdraw their ETH earnings\"},\"withdrawPlatformFeesEth()\":{\"notice\":\"Withdraw platform fees in ETH (only contract owner)\"},\"withdrawPlatformFeesToken(address)\":{\"notice\":\"Withdraw platform fees in tokens (only contract owner)\"},\"withdrawTokenEarnings(address)\":{\"notice\":\"Allow creators to withdraw their token earnings\"}},\"notice\":\"A smart contract for streaming content donations Allows content creators to register their streaming URLs and receive donations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PisangContract.sol\":\"PisangContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/PisangContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * A smart contract for streaming content donations\\n * Allows content creators to register their streaming URLs and receive donations\\n * @author Pisa\\n */\\ncontract PisangContract is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    \\n    // State Variables\\n    address public immutable contractOwner;\\n    uint256 public totalContents = 0;\\n    uint256 public totalDonations = 0;\\n    uint256 public platformFee = 250; // 2.5% (in basis points)\\n    \\n    // Token support\\n    mapping(address => bool) public supportedTokens;\\n    mapping(address => string) public tokenSymbols;\\n    address[] public supportedTokenList;\\n    \\n    // Structs\\n    struct Content {\\n        string url;\\n        address owner;\\n        uint256 totalDonationsReceived;\\n        uint256 donationCount;\\n        bool isActive;\\n        uint256 createdAt;\\n    }\\n    \\n    struct Donation {\\n        address donor;\\n        address contentOwner;\\n        uint256 amount;\\n        uint256 timestamp;\\n        string contentUrl;\\n        address token; // address(0) for ETH, token address for ERC20\\n    }\\n    \\n    // Mappings\\n    mapping(string => Content) public contents; // url => Content\\n    mapping(address => string[]) public creatorContents; // creator => urls[]\\n    mapping(address => mapping(address => uint256)) public creatorEarnings; // creator => token => total earnings\\n    mapping(address => mapping(address => uint256)) public donorTotalDonations; // donor => token => total donated\\n    mapping(uint256 => Donation) public donations; // donation ID => Donation\\n    mapping(string => uint256[]) public contentDonations; // url => donation IDs[]\\n    \\n    // Events\\n    event ContentRegistered(\\n        string indexed url, \\n        address indexed owner, \\n        uint256 timestamp\\n    );\\n    \\n    event DonationMade(\\n        address indexed donor,\\n        address indexed contentOwner,\\n        string indexed contentUrl,\\n        uint256 amount,\\n        uint256 donationId,\\n        uint256 timestamp,\\n        address token\\n    );\\n    \\n    event ContentDeactivated(string indexed url, address indexed owner);\\n    event ContentReactivated(string indexed url, address indexed owner);\\n    event WithdrawalMade(address indexed creator, uint256 amount, address token);\\n    event PlatformFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event TokenAdded(address indexed token, string symbol);\\n    event TokenRemoved(address indexed token);\\n    \\n    // Modifiers\\n    modifier onlyContractOwner() {\\n        require(msg.sender == contractOwner, \\\"Not the contract owner\\\");\\n        _;\\n    }\\n    \\n    modifier onlyContentOwner(string memory _url) {\\n        require(contents[_url].owner == msg.sender, \\\"Not the content owner\\\");\\n        _;\\n    }\\n    \\n    modifier contentExists(string memory _url) {\\n        require(bytes(contents[_url].url).length > 0, \\\"Content does not exist\\\");\\n        _;\\n    }\\n    \\n    modifier contentActive(string memory _url) {\\n        require(contents[_url].isActive, \\\"Content is not active\\\");\\n        _;\\n    }\\n    \\n    // Constructor\\n    constructor(address _contractOwner) {\\n        contractOwner = _contractOwner;\\n    }\\n    \\n    /**\\n     * Register a new streaming content URL\\n     * @param _url The streaming content URL\\n     */\\n    function registerContent(string memory _url) public {\\n        require(bytes(_url).length > 0, \\\"URL cannot be empty\\\");\\n        require(bytes(contents[_url].url).length == 0, \\\"Content already registered\\\");\\n        \\n        contents[_url] = Content({\\n            url: _url,\\n            owner: msg.sender,\\n            totalDonationsReceived: 0,\\n            donationCount: 0,\\n            isActive: true,\\n            createdAt: block.timestamp\\n        });\\n        \\n        creatorContents[msg.sender].push(_url);\\n        totalContents++;\\n        \\n        emit ContentRegistered(_url, msg.sender, block.timestamp);\\n    }\\n    \\n    /**\\n     * Donate to a specific content\\n     * @param _url The content URL to donate to\\n     */\\n    function donateToContent(string memory _url) \\n        public \\n        payable \\n        contentExists(_url) \\n        contentActive(_url) \\n    {\\n        require(msg.value > 0, \\\"Donation amount must be greater than 0\\\");\\n        \\n        Content storage content = contents[_url];\\n        \\n        // Calculate platform fee\\n        uint256 fee = (msg.value * platformFee) / 10000;\\n        uint256 creatorAmount = msg.value - fee;\\n        \\n        // Update content stats\\n        content.totalDonationsReceived += creatorAmount;\\n        content.donationCount++;\\n        \\n        // Update creator earnings (ETH)\\n        creatorEarnings[content.owner][address(0)] += creatorAmount;\\n        \\n        // Update donor stats (ETH)\\n        donorTotalDonations[msg.sender][address(0)] += msg.value;\\n        \\n        // Create donation record\\n        donations[totalDonations] = Donation({\\n            donor: msg.sender,\\n            contentOwner: content.owner,\\n            amount: msg.value,\\n            timestamp: block.timestamp,\\n            contentUrl: _url,\\n            token: address(0) // ETH\\n        });\\n        \\n        // Add donation ID to content donations\\n        contentDonations[_url].push(totalDonations);\\n        \\n        totalDonations++;\\n        \\n        emit DonationMade(\\n            msg.sender, \\n            content.owner, \\n            _url, \\n            msg.value, \\n            totalDonations - 1, \\n            block.timestamp,\\n            address(0) // ETH\\n        );\\n    }\\n    \\n    /**\\n     * Donate tokens to a specific content\\n     * @param _url The content URL to donate to\\n     * @param _token The token address to donate\\n     * @param _amount The amount of tokens to donate\\n     */\\n    function donateTokenToContent(\\n        string memory _url, \\n        address _token, \\n        uint256 _amount\\n    ) \\n        public \\n        contentExists(_url) \\n        contentActive(_url) \\n        nonReentrant\\n    {\\n        require(_amount > 0, \\\"Donation amount must be greater than 0\\\");\\n        require(supportedTokens[_token], \\\"Token not supported\\\");\\n        \\n        Content storage content = contents[_url];\\n        \\n        // Transfer tokens from donor to contract\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        \\n        // Calculate platform fee\\n        uint256 fee = (_amount * platformFee) / 10000;\\n        uint256 creatorAmount = _amount - fee;\\n        \\n        // Update content stats (we track total in Wei/smallest unit equivalent)\\n        content.totalDonationsReceived += creatorAmount;\\n        content.donationCount++;\\n        \\n        // Update creator earnings\\n        creatorEarnings[content.owner][_token] += creatorAmount;\\n        \\n        // Update donor stats\\n        donorTotalDonations[msg.sender][_token] += _amount;\\n        \\n        // Create donation record\\n        donations[totalDonations] = Donation({\\n            donor: msg.sender,\\n            contentOwner: content.owner,\\n            amount: _amount,\\n            timestamp: block.timestamp,\\n            contentUrl: _url,\\n            token: _token\\n        });\\n        \\n        // Add donation ID to content donations\\n        contentDonations[_url].push(totalDonations);\\n        \\n        totalDonations++;\\n        \\n        emit DonationMade(\\n            msg.sender, \\n            content.owner, \\n            _url, \\n            _amount, \\n            totalDonations - 1, \\n            block.timestamp,\\n            _token\\n        );\\n    }\\n    \\n    /**\\n     * Allow creators to withdraw their ETH earnings\\n     */\\n    function withdrawEthEarnings() public nonReentrant {\\n        uint256 amount = creatorEarnings[msg.sender][address(0)];\\n        require(amount > 0, \\\"No ETH earnings to withdraw\\\");\\n        \\n        creatorEarnings[msg.sender][address(0)] = 0;\\n        \\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH withdrawal failed\\\");\\n        \\n        emit WithdrawalMade(msg.sender, amount, address(0));\\n    }\\n    \\n    /**\\n     * Allow creators to withdraw their token earnings\\n     * @param _token The token address to withdraw\\n     */\\n    function withdrawTokenEarnings(address _token) public nonReentrant {\\n        require(supportedTokens[_token], \\\"Token not supported\\\");\\n        uint256 amount = creatorEarnings[msg.sender][_token];\\n        require(amount > 0, \\\"No token earnings to withdraw\\\");\\n        \\n        creatorEarnings[msg.sender][_token] = 0;\\n        \\n        IERC20(_token).safeTransfer(msg.sender, amount);\\n        \\n        emit WithdrawalMade(msg.sender, amount, _token);\\n    }\\n    \\n    /**\\n     * Withdraw all earnings for a creator (ETH + all supported tokens)\\n     */\\n    function withdrawAllEarnings() public nonReentrant {\\n        bool hasWithdrawn = false;\\n        \\n        // Withdraw ETH earnings\\n        uint256 ethAmount = creatorEarnings[msg.sender][address(0)];\\n        if (ethAmount > 0) {\\n            creatorEarnings[msg.sender][address(0)] = 0;\\n            (bool success, ) = msg.sender.call{value: ethAmount}(\\\"\\\");\\n            require(success, \\\"ETH withdrawal failed\\\");\\n            emit WithdrawalMade(msg.sender, ethAmount, address(0));\\n            hasWithdrawn = true;\\n        }\\n        \\n        // Withdraw token earnings\\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            address token = supportedTokenList[i];\\n            uint256 tokenAmount = creatorEarnings[msg.sender][token];\\n            if (tokenAmount > 0) {\\n                creatorEarnings[msg.sender][token] = 0;\\n                IERC20(token).safeTransfer(msg.sender, tokenAmount);\\n                emit WithdrawalMade(msg.sender, tokenAmount, token);\\n                hasWithdrawn = true;\\n            }\\n        }\\n        \\n        require(hasWithdrawn, \\\"No earnings to withdraw\\\");\\n    }\\n    \\n    /**\\n     * Deactivate content (only by content owner)\\n     * @param _url The content URL to deactivate\\n     */\\n    function deactivateContent(string memory _url) \\n        public \\n        contentExists(_url) \\n        onlyContentOwner(_url) \\n    {\\n        contents[_url].isActive = false;\\n        emit ContentDeactivated(_url, msg.sender);\\n    }\\n    \\n    /**\\n     * Reactivate content (only by content owner)\\n     * @param _url The content URL to reactivate\\n     */\\n    function reactivateContent(string memory _url) \\n        public \\n        contentExists(_url) \\n        onlyContentOwner(_url) \\n    {\\n        contents[_url].isActive = true;\\n        emit ContentReactivated(_url, msg.sender);\\n    }\\n    \\n    /**\\n     * Get content information\\n     * @param _url The content URL\\n     */\\n    function getContent(string memory _url) \\n        public \\n        view \\n        returns (\\n            string memory url,\\n            address owner,\\n            uint256 totalDonationsReceived,\\n            uint256 donationCount,\\n            bool isActive,\\n            uint256 createdAt\\n        ) \\n    {\\n        Content memory content = contents[_url];\\n        return (\\n            content.url,\\n            content.owner,\\n            content.totalDonationsReceived,\\n            content.donationCount,\\n            content.isActive,\\n            content.createdAt\\n        );\\n    }\\n    \\n    /**\\n     * Get all content URLs by a creator\\n     * @param _creator The creator's address\\n     */\\n    function getCreatorContents(address _creator) \\n        public \\n        view \\n        returns (string[] memory) \\n    {\\n        return creatorContents[_creator];\\n    }\\n    \\n    /**\\n     * Get donation IDs for a specific content\\n     * @param _url The content URL\\n     */\\n    function getContentDonations(string memory _url) \\n        public \\n        view \\n        returns (uint256[] memory) \\n    {\\n        return contentDonations[_url];\\n    }\\n    \\n    /**\\n     * Check if content exists\\n     * @param _url The content URL to check\\n     * @return bool True if content exists, false otherwise\\n     */\\n    function contentExistsCheck(string memory _url) \\n        public \\n        view \\n        returns (bool) \\n    {\\n        return bytes(contents[_url].url).length > 0;\\n    }\\n    \\n    /**\\n     * Get donation details by ID\\n     * @param _donationId The donation ID\\n     */\\n    function getDonation(uint256 _donationId) \\n        public \\n        view \\n        returns (\\n            address donor,\\n            address contentOwner,\\n            uint256 amount,\\n            uint256 timestamp,\\n            string memory contentUrl,\\n            address token\\n        ) \\n    {\\n        Donation memory donation = donations[_donationId];\\n        return (\\n            donation.donor,\\n            donation.contentOwner,\\n            donation.amount,\\n            donation.timestamp,\\n            donation.contentUrl,\\n            donation.token\\n        );\\n    }\\n    \\n    /**\\n     * Get top donors for a specific content (last 10 donations)\\n     * @param _url The content URL\\n     */\\n    function getRecentDonations(string memory _url, uint256 _limit) \\n        public \\n        view \\n        returns (uint256[] memory) \\n    {\\n        uint256[] memory contentDonationIds = contentDonations[_url];\\n        uint256 length = contentDonationIds.length;\\n        \\n        if (length == 0) {\\n            return new uint256[](0);\\n        }\\n        \\n        uint256 limit = _limit > length ? length : _limit;\\n        uint256[] memory recentDonations = new uint256[](limit);\\n        \\n        for (uint256 i = 0; i < limit; i++) {\\n            recentDonations[i] = contentDonationIds[length - 1 - i];\\n        }\\n        \\n        return recentDonations;\\n    }\\n    \\n    /**\\n     * Get creator earnings for a specific token\\n     * @param _creator The creator's address\\n     * @param _token The token address (address(0) for ETH)\\n     */\\n    function getCreatorEarnings(address _creator, address _token) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        return creatorEarnings[_creator][_token];\\n    }\\n    \\n    /**\\n     * Get creator earnings for all tokens\\n     * @param _creator The creator's address\\n     */\\n    function getCreatorAllEarnings(address _creator) \\n        public \\n        view \\n        returns (address[] memory tokens, uint256[] memory amounts, string[] memory symbols) \\n    {\\n        // Include ETH + all supported tokens\\n        tokens = new address[](supportedTokenList.length + 1);\\n        amounts = new uint256[](supportedTokenList.length + 1);\\n        symbols = new string[](supportedTokenList.length + 1);\\n        \\n        // ETH earnings\\n        tokens[0] = address(0);\\n        amounts[0] = creatorEarnings[_creator][address(0)];\\n        symbols[0] = \\\"ETH\\\";\\n        \\n        // Token earnings\\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            address token = supportedTokenList[i];\\n            tokens[i + 1] = token;\\n            amounts[i + 1] = creatorEarnings[_creator][token];\\n            symbols[i + 1] = tokenSymbols[token];\\n        }\\n    }\\n    \\n    /**\\n     * Get donor total donations for a specific token\\n     * @param _donor The donor's address\\n     * @param _token The token address (address(0) for ETH)\\n     */\\n    function getDonorTotalDonations(address _donor, address _token) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        return donorTotalDonations[_donor][_token];\\n    }\\n    \\n    /**\\n     * Get donor total donations for all tokens\\n     * @param _donor The donor's address\\n     */\\n    function getDonorAllDonations(address _donor) \\n        public \\n        view \\n        returns (address[] memory tokens, uint256[] memory amounts, string[] memory symbols) \\n    {\\n        // Include ETH + all supported tokens\\n        tokens = new address[](supportedTokenList.length + 1);\\n        amounts = new uint256[](supportedTokenList.length + 1);\\n        symbols = new string[](supportedTokenList.length + 1);\\n        \\n        // ETH donations\\n        tokens[0] = address(0);\\n        amounts[0] = donorTotalDonations[_donor][address(0)];\\n        symbols[0] = \\\"ETH\\\";\\n        \\n        // Token donations\\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            address token = supportedTokenList[i];\\n            tokens[i + 1] = token;\\n            amounts[i + 1] = donorTotalDonations[_donor][token];\\n            symbols[i + 1] = tokenSymbols[token];\\n        }\\n    }\\n\\n    /**\\n     * Add a supported token (only contract owner)\\n     * @param _token The token address to add\\n     * @param _symbol The token symbol for display purposes\\n     */\\n    function addSupportedToken(address _token, string memory _symbol) \\n        public \\n        onlyContractOwner \\n    {\\n        require(_token != address(0), \\\"Invalid token address\\\");\\n        require(!supportedTokens[_token], \\\"Token already supported\\\");\\n        require(bytes(_symbol).length > 0, \\\"Symbol cannot be empty\\\");\\n        \\n        supportedTokens[_token] = true;\\n        tokenSymbols[_token] = _symbol;\\n        supportedTokenList.push(_token);\\n        \\n        emit TokenAdded(_token, _symbol);\\n    }\\n    \\n    /**\\n     * Remove a supported token (only contract owner)\\n     * @param _token The token address to remove\\n     */\\n    function removeSupportedToken(address _token) \\n        public \\n        onlyContractOwner \\n    {\\n        require(supportedTokens[_token], \\\"Token not supported\\\");\\n        \\n        supportedTokens[_token] = false;\\n        delete tokenSymbols[_token];\\n        \\n        // Remove from supportedTokenList\\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            if (supportedTokenList[i] == _token) {\\n                supportedTokenList[i] = supportedTokenList[supportedTokenList.length - 1];\\n                supportedTokenList.pop();\\n                break;\\n            }\\n        }\\n        \\n        emit TokenRemoved(_token);\\n    }\\n    \\n    /**\\n     * Get all supported tokens\\n     */\\n    function getSupportedTokens() \\n        public \\n        view \\n        returns (address[] memory tokens, string[] memory symbols) \\n    {\\n        tokens = supportedTokenList;\\n        symbols = new string[](supportedTokenList.length);\\n        \\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            symbols[i] = tokenSymbols[supportedTokenList[i]];\\n        }\\n    }\\n    \\n    /**\\n     * Update platform fee (only contract owner)\\n     * @param _newFee New fee in basis points (e.g., 250 = 2.5%)\\n     */\\n    function updatePlatformFee(uint256 _newFee) public onlyContractOwner {\\n        require(_newFee <= 1000, \\\"Fee cannot exceed 10%\\\"); // Max 10%\\n        uint256 oldFee = platformFee;\\n        platformFee = _newFee;\\n        emit PlatformFeeUpdated(oldFee, _newFee);\\n    }\\n    \\n    /**\\n     * Get platform statistics\\n     */\\n    function getPlatformStats() \\n        public \\n        view \\n        returns (\\n            uint256 totalContentsCount,\\n            uint256 totalDonationsCount,\\n            uint256 currentPlatformFee\\n        ) \\n    {\\n        return (totalContents, totalDonations, platformFee);\\n    }\\n    \\n    /**\\n     * Withdraw platform fees in ETH (only contract owner)\\n     */\\n    function withdrawPlatformFeesEth() public onlyContractOwner nonReentrant {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No ETH fees to withdraw\\\");\\n        \\n        (bool success, ) = contractOwner.call{value: balance}(\\\"\\\");\\n        require(success, \\\"ETH fee withdrawal failed\\\");\\n    }\\n    \\n    /**\\n     * Withdraw platform fees in tokens (only contract owner)\\n     * @param _token The token address to withdraw fees for\\n     */\\n    function withdrawPlatformFeesToken(address _token) public onlyContractOwner nonReentrant {\\n        require(supportedTokens[_token], \\\"Token not supported\\\");\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        \\n        require(balance > 0, \\\"No token fees to withdraw\\\");\\n        IERC20(_token).safeTransfer(contractOwner, balance);\\n    }\\n    \\n    /**\\n     * Withdraw all platform fees (ETH + all tokens) (only contract owner)\\n     */\\n    function withdrawAllPlatformFees() public onlyContractOwner nonReentrant {\\n        // Withdraw ETH fees\\n        uint256 ethBalance = address(this).balance;\\n        if (ethBalance > 0) {\\n            (bool success, ) = contractOwner.call{value: ethBalance}(\\\"\\\");\\n            require(success, \\\"ETH fee withdrawal failed\\\");\\n        }\\n        \\n        // Withdraw token fees\\n        for (uint256 i = 0; i < supportedTokenList.length; i++) {\\n            address token = supportedTokenList[i];\\n            uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n            if (tokenBalance > 0) {\\n                IERC20(token).safeTransfer(contractOwner, tokenBalance);\\n            }\\n        }\\n    }\\n    \\n    /**\\n     * Emergency function to transfer content ownership\\n     * @param _url The content URL\\n     * @param _newOwner The new owner address\\n     */\\n    function transferContentOwnership(string memory _url, address _newOwner) \\n        public \\n        contentExists(_url) \\n        onlyContentOwner(_url) \\n    {\\n        require(_newOwner != address(0), \\\"Invalid new owner address\\\");\\n        require(_newOwner != contents[_url].owner, \\\"Same owner\\\");\\n        \\n        address oldOwner = contents[_url].owner;\\n        contents[_url].owner = _newOwner;\\n        \\n        // Update creator contents arrays\\n        string[] storage oldOwnerContents = creatorContents[oldOwner];\\n        for (uint256 i = 0; i < oldOwnerContents.length; i++) {\\n            if (keccak256(bytes(oldOwnerContents[i])) == keccak256(bytes(_url))) {\\n                oldOwnerContents[i] = oldOwnerContents[oldOwnerContents.length - 1];\\n                oldOwnerContents.pop();\\n                break;\\n            }\\n        }\\n        \\n        creatorContents[_newOwner].push(_url);\\n    }\\n    \\n    /**\\n     * Function that allows the contract to receive ETH\\n     */\\n    receive() external payable {}\\n    \\n    /**\\n     * Fallback function\\n     */\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x912b16a3b2e7eb7026d6d0917d1b377b24ebd895e87b9866b1ab175888416f78\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040526000600155600060025560fa6003553480156200002057600080fd5b50604051620043a0380380620043a083398101604081905262000043916200005a565b60016000556001600160a01b03166080526200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b6080516142b2620000ee6000396000818161070101528181610c2701528181610cc701528181610f67015281816110b001528181611e65015281816120700152818161280201528181612ae001528181612b300152612c9d01526142b26000f3fe6080604052600436106102275760003560e01c80637e87addf11610122578063b8bc7b0e116100a5578063d866dc9d1161006c578063d866dc9d14610766578063de2ed8931461079e578063ef07a81f146107b4578063f8626af8146107e6578063fb0b2b361461080657005b8063b8bc7b0e146106ba578063bb55ba08146106cf578063ce606ee0146106ef578063d3c7c2c714610723578063d6f2bdcb1461074657005b80639b3d24ee116100e95780639b3d24ee146105dc578063a6acce3514610622578063aa0b598814610642578063ac4d9cb214610662578063b0825df31461068257005b80637e87addf1461050f5780638c9e1f3c1461052f578063935de851146105615780639881b46b1461057657806399cd0468146105bc57005b80633848627b116101aa5780635d95b93d116101715780635d95b93d1461046a57806368c4ac261461047f57806368ea48e6146104af578063720138e8146104cf57806376319190146104ef57005b80633848627b146103c7578063401a9685146103dd578063403747331461040a57806342c17e8f146104375780635573bd931461044a57005b80631c784c2a116101ee5780631c784c2a1461030b57806323ccdef91461033957806326232a2e146103595780632b60c8221461036f57806331256666146103a757005b806305cbf0b2146102305780630f9ad7271461026857806310c6f57c14610298578063136d8883146102c557806318dc0812146102f657005b3661022e57005b005b34801561023c57600080fd5b5061025061024b3660046138d1565b610826565b60405161025f93929190613a08565b60405180910390f35b34801561027457600080fd5b50610288610283366004613ae3565b610b75565b604051901515815260200161025f565b3480156102a457600080fd5b506102b86102b3366004613ae3565b610bac565b60405161025f9190613b1f565b3480156102d157600080fd5b506001546002546003546040805193845260208401929092529082015260600161025f565b34801561030257600080fd5b5061022e610c1c565b34801561031757600080fd5b5061032b610326366004613b32565b610d90565b60405190815260200161025f565b34801561034557600080fd5b506102b8610354366004613b32565b610dd0565b34801561036557600080fd5b5061032b60035481565b34801561037b57600080fd5b5061038f61038a366004613b76565b610f32565b6040516001600160a01b03909116815260200161025f565b3480156103b357600080fd5b5061022e6103c23660046138d1565b610f5c565b3480156103d357600080fd5b5061032b60015481565b3480156103e957600080fd5b506103fd6103f8366004613b8f565b6110e3565b60405161025f9190613bb9565b34801561041657600080fd5b5061042a6104253660046138d1565b61119c565b60405161025f9190613bcc565b61022e610445366004613ae3565b61128b565b34801561045657600080fd5b5061022e610465366004613bdf565b6115f1565b34801561047657600080fd5b5061022e6118ed565b34801561048b57600080fd5b5061028861049a3660046138d1565b60046020526000908152604090205460ff1681565b3480156104bb57600080fd5b506102506104ca3660046138d1565b611b13565b3480156104db57600080fd5b5061022e6104ea366004613c2c565b611e5a565b3480156104fb57600080fd5b5061022e61050a3660046138d1565b612065565b34801561051b57600080fd5b5061022e61052a3660046138d1565b612258565b34801561053b57600080fd5b5061054f61054a366004613ae3565b612376565b60405161025f96959493929190613c79565b34801561056d57600080fd5b5061022e6124ba565b34801561058257600080fd5b5061032b610591366004613cc0565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b3480156105c857600080fd5b5061022e6105d7366004613ae3565b612609565b3480156105e857600080fd5b5061032b6105f7366004613cc0565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b34801561062e57600080fd5b5061054f61063d366004613ae3565b612721565b34801561064e57600080fd5b5061022e61065d366004613b76565b6127f7565b34801561066e57600080fd5b5061022e61067d366004613ae3565b6128ce565b34801561068e57600080fd5b5061032b61069d366004613cc0565b600a60209081526000928352604080842090915290825290205481565b3480156106c657600080fd5b5061022e612ad5565b3480156106db57600080fd5b5061022e6106ea366004613ae3565b612cd7565b3480156106fb57600080fd5b5061038f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561072f57600080fd5b50610738612def565b60405161025f929190613cea565b34801561075257600080fd5b5061022e610761366004613d18565b612fa7565b34801561077257600080fd5b5061032b610781366004613cc0565b600960209081526000928352604080842090915290825290205481565b3480156107aa57600080fd5b5061032b60025481565b3480156107c057600080fd5b506107d46107cf366004613b76565b6133db565b60405161025f96959493929190613d6e565b3480156107f257600080fd5b506107d4610801366004613b76565b613512565b34801561081257600080fd5b506103fd6108213660046138d1565b6135e7565b6006546060908190819061083b906001613dd0565b6001600160401b0381111561085257610852613a41565b60405190808252806020026020018201604052801561087b578160200160208202803683370190505b5060065490935061088d906001613dd0565b6001600160401b038111156108a4576108a4613a41565b6040519080825280602002602001820160405280156108cd578160200160208202803683370190505b506006549092506108df906001613dd0565b6001600160401b038111156108f6576108f6613a41565b60405190808252806020026020018201604052801561092957816020015b60608152602001906001900390816109145790505b50905060008360008151811061094157610941613de3565b6001600160a01b0392831660209182029290920181019190915290851660009081526009825260408082208280529092529081205483519091849161098857610988613de3565b6020026020010181815250506040518060400160405280600381526020016208aa8960eb1b815250816000815181106109c3576109c3613de3565b602002602001018190525060005b600654811015610b6d576000600682815481106109f0576109f0613de3565b6000918252602090912001546001600160a01b031690508085610a14846001613dd0565b81518110610a2457610a24613de3565b6001600160a01b039283166020918202929092018101919091528782166000908152600982526040808220938516825292909152205484610a66846001613dd0565b81518110610a7657610a76613de3565b60200260200101818152505060056000826001600160a01b03166001600160a01b031681526020019081526020016000208054610ab290613df9565b80601f0160208091040260200160405190810160405280929190818152602001828054610ade90613df9565b8015610b2b5780601f10610b0057610100808354040283529160200191610b2b565b820191906000526020600020905b815481529060010190602001808311610b0e57829003601f168201915b505050505083836001610b3e9190613dd0565b81518110610b4e57610b4e613de3565b6020026020010181905250508080610b6590613e33565b9150506109d1565b509193909250565b600080600783604051610b889190613e4c565b9081526040519081900360200190208054610ba290613df9565b9050119050919050565b6060600c82604051610bbe9190613e4c565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015610c1057602002820191906000526020600020905b815481526020019060010190808311610bfc575b50505050509050919050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c6d5760405162461bcd60e51b8152600401610c6490613e68565b60405180910390fd5b610c75613600565b4780610cc35760405162461bcd60e51b815260206004820152601760248201527f4e6f20455448206665657320746f2077697468647261770000000000000000006044820152606401610c64565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d30576040519150601f19603f3d011682016040523d82523d6000602084013e610d35565b606091505b5050905080610d825760405162461bcd60e51b815260206004820152601960248201527811551208199959481dda5d1a191c985dd85b0819985a5b1959603a1b6044820152606401610c64565b5050610d8e6001600055565b565b8151602081840181018051600c825292820191850191909120919052805482908110610dbb57600080fd5b90600052602060002001600091509150505481565b60606000600c84604051610de49190613e4c565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015610e3657602002820191906000526020600020905b815481526020019060010190808311610e22575b5050505050905060008151905080600003610e635750506040805160008152602081019091529050610f2c565b6000818511610e725784610e74565b815b90506000816001600160401b03811115610e9057610e90613a41565b604051908082528060200260200182016040528015610eb9578160200160208202803683370190505b50905060005b82811015610f25578481610ed4600187613e98565b610ede9190613e98565b81518110610eee57610eee613de3565b6020026020010151828281518110610f0857610f08613de3565b602090810291909101015280610f1d81613e33565b915050610ebf565b5093505050505b92915050565b60068181548110610f4257600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fa45760405162461bcd60e51b8152600401610c6490613e68565b610fac613600565b6001600160a01b03811660009081526004602052604090205460ff16610fe45760405162461bcd60e51b8152600401610c6490613eab565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f9190613ed8565b9050600081116110a15760405162461bcd60e51b815260206004820152601960248201527f4e6f20746f6b656e206665657320746f207769746864726177000000000000006044820152606401610c64565b6110d56001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000008361362a565b506110e06001600055565b50565b600860205281600052604060002081815481106110ff57600080fd5b9060005260206000200160009150915050805461111b90613df9565b80601f016020809104026020016040519081016040528092919081815260200182805461114790613df9565b80156111945780601f1061116957610100808354040283529160200191611194565b820191906000526020600020905b81548152906001019060200180831161117757829003601f168201915b505050505081565b6001600160a01b0381166000908152600860209081526040808320805482518185028101850190935280835260609492939192909184015b828210156112805783829060005260206000200180546111f390613df9565b80601f016020809104026020016040519081016040528092919081815260200182805461121f90613df9565b801561126c5780601f106112415761010080835404028352916020019161126c565b820191906000526020600020905b81548152906001019060200180831161124f57829003601f168201915b5050505050815260200190600101906111d4565b505050509050919050565b80600060078260405161129e9190613e4c565b90815260405190819003602001902080546112b890613df9565b9050116112d75760405162461bcd60e51b8152600401610c6490613ef1565b816007816040516112e89190613e4c565b9081526040519081900360200190206004015460ff166113425760405162461bcd60e51b8152602060048201526015602482015274436f6e74656e74206973206e6f742061637469766560581b6044820152606401610c64565b600034116113625760405162461bcd60e51b8152600401610c6490613f21565b60006007846040516113749190613e4c565b908152602001604051809103902090506000612710600354346113979190613f67565b6113a19190613f7e565b905060006113af8234613e98565b9050808360020160008282546113c59190613dd0565b90915550506003830180549060006113dc83613e33565b909155505060018301546001600160a01b0316600090815260096020908152604080832083805290915281208054839290611418908490613dd0565b9091555050336000908152600a6020908152604080832083805290915281208054349290611447908490613dd0565b90915550506040805160c0810182523381526001858101546001600160a01b039081166020808501918252348587019081524260608701908152608087018e8152600060a08901819052600280548252600b90955298909820875181546001600160a01b031990811691881691909117825594519681018054909516969095169590951790925590519082015590516003820155915190919060048201906114ef9082613fee565b5060a09190910151600590910180546001600160a01b0319166001600160a01b03909216919091179055604051600c9061152a908890613e4c565b908152604051602091819003820190206002805482546001810184556000938452938320909301929092558154919061156283613e33565b9190505550856040516115759190613e4c565b6040519081900390206001808501546002546001600160a01b039091169133917fb5d59b7dcecbfa44be93adbd36abc3d5d92b159a3dff85ecc32080511a906f7d9134916115c39190613e98565b60408051928352602083019190915242908201526000606082015260800160405180910390a4505050505050565b8160006007826040516116049190613e4c565b908152604051908190036020019020805461161e90613df9565b90501161163d5760405162461bcd60e51b8152600401610c6490613ef1565b82336001600160a01b03166007826040516116589190613e4c565b908152604051908190036020019020600101546001600160a01b0316146116915760405162461bcd60e51b8152600401610c64906140ad565b6001600160a01b0383166116e75760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206e6577206f776e65722061646472657373000000000000006044820152606401610c64565b6007846040516116f79190613e4c565b908152604051908190036020019020600101546001600160a01b03908116908416036117525760405162461bcd60e51b815260206004820152600a60248201526929b0b6b29037bbb732b960b11b6044820152606401610c64565b60006007856040516117649190613e4c565b908152604051908190036020018120600101546001600160a01b031691508490600790611792908890613e4c565b908152604080516020928190038301902060010180546001600160a01b0319166001600160a01b0394851617905591831660009081526008909152908120905b81548110156118b15786805190602001208282815481106117f5576117f5613de3565b9060005260206000200160405161180c91906140dc565b60405180910390200361189f578154829061182990600190613e98565b8154811061183957611839613de3565b9060005260206000200182828154811061185557611855613de3565b90600052602060002001908161186b9190614152565b508180548061187c5761187c614224565b6001900381819060005260206000200160006118989190613867565b90556118b1565b806118a981613e33565b9150506117d2565b506001600160a01b0385166000908152600860209081526040822080546001810182559083529120016118e48782613fee565b50505050505050565b6118f5613600565b33600090815260096020908152604080832083805290915281205480156119ef573360008181526009602090815260408083208380529091528082208290555190919083908381818185875af1925050503d8060008114611972576040519150601f19603f3d011682016040523d82523d6000602084013e611977565b606091505b50509050806119c05760405162461bcd60e51b8152602060048201526015602482015274115512081dda5d1a191c985dd85b0819985a5b1959605a1b6044820152606401610c64565b6040805183815260006020820152339160008051602061425d833981519152910160405180910390a260019250505b60005b600654811015611ac557600060068281548110611a1157611a11613de3565b60009182526020808320909101543383526009825260408084206001600160a01b03909216808552919092529120549091508015611ab0573360008181526009602090815260408083206001600160a01b0387168085529252822091909155611a7a918361362a565b604080518281526001600160a01b0384166020820152339160008051602061425d833981519152910160405180910390a2600194505b50508080611abd90613e33565b9150506119f2565b5081610d825760405162461bcd60e51b815260206004820152601760248201527f4e6f206561726e696e677320746f2077697468647261770000000000000000006044820152606401610c64565b60065460609081908190611b28906001613dd0565b6001600160401b03811115611b3f57611b3f613a41565b604051908082528060200260200182016040528015611b68578160200160208202803683370190505b50600654909350611b7a906001613dd0565b6001600160401b03811115611b9157611b91613a41565b604051908082528060200260200182016040528015611bba578160200160208202803683370190505b50600654909250611bcc906001613dd0565b6001600160401b03811115611be357611be3613a41565b604051908082528060200260200182016040528015611c1657816020015b6060815260200190600190039081611c015790505b509050600083600081518110611c2e57611c2e613de3565b6001600160a01b039283166020918202929092018101919091529085166000908152600a8252604080822082805290925290812054835190918491611c7557611c75613de3565b6020026020010181815250506040518060400160405280600381526020016208aa8960eb1b81525081600081518110611cb057611cb0613de3565b602002602001018190525060005b600654811015610b6d57600060068281548110611cdd57611cdd613de3565b6000918252602090912001546001600160a01b031690508085611d01846001613dd0565b81518110611d1157611d11613de3565b6001600160a01b039283166020918202929092018101919091528782166000908152600a82526040808220938516825292909152205484611d53846001613dd0565b81518110611d6357611d63613de3565b60200260200101818152505060056000826001600160a01b03166001600160a01b031681526020019081526020016000208054611d9f90613df9565b80601f0160208091040260200160405190810160405280929190818152602001828054611dcb90613df9565b8015611e185780601f10611ded57610100808354040283529160200191611e18565b820191906000526020600020905b815481529060010190602001808311611dfb57829003601f168201915b505050505083836001611e2b9190613dd0565b81518110611e3b57611e3b613de3565b6020026020010181905250508080611e5290613e33565b915050611cbe565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611ea25760405162461bcd60e51b8152600401610c6490613e68565b6001600160a01b038216611ef05760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610c64565b6001600160a01b03821660009081526004602052604090205460ff1615611f595760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616c726561647920737570706f727465640000000000000000006044820152606401610c64565b6000815111611fa35760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b6044820152606401610c64565b6001600160a01b0382166000908152600460209081526040808320805460ff1916600117905560059091529020611fda8282613fee565b50600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0384169081179091556040517f7afee0f1b802cc0f66c67890e26b4566251859cf2cd8de79b86aed7251d9756a90612059908490613bb9565b60405180910390a25050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146120ad5760405162461bcd60e51b8152600401610c6490613e68565b6001600160a01b03811660009081526004602052604090205460ff166120e55760405162461bcd60e51b8152600401610c6490613eab565b6001600160a01b0381166000908152600460209081526040808320805460ff191690556005909152812061211891613867565b60005b60065481101561222057816001600160a01b03166006828154811061214257612142613de3565b6000918252602090912001546001600160a01b03160361220e576006805461216c90600190613e98565b8154811061217c5761217c613de3565b600091825260209091200154600680546001600160a01b0390921691839081106121a8576121a8613de3565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060068054806121e7576121e7614224565b600082815260209020810160001990810180546001600160a01b0319169055019055612220565b8061221881613e33565b91505061211b565b506040516001600160a01b038216907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a250565b612260613600565b6001600160a01b03811660009081526004602052604090205460ff166122985760405162461bcd60e51b8152600401610c6490613eab565b3360009081526009602090815260408083206001600160a01b0385168452909152902054806123095760405162461bcd60e51b815260206004820152601d60248201527f4e6f20746f6b656e206561726e696e677320746f2077697468647261770000006044820152606401610c64565b3360008181526009602090815260408083206001600160a01b038716808552925282209190915561233a918361362a565b604080518281526001600160a01b0384166020820152339160008051602061425d833981519152910160405180910390a2506110e06001600055565b60606000806000806000806007886040516123919190613e4c565b90815260200160405180910390206040518060c00160405290816000820180546123ba90613df9565b80601f01602080910402602001604051908101604052809291908181526020018280546123e690613df9565b80156124335780601f1061240857610100808354040283529160200191612433565b820191906000526020600020905b81548152906001019060200180831161241657829003601f168201915b505050918352505060018201546001600160a01b031660208083019190915260028301546040808401919091526003840154606080850191909152600485015460ff16151560808086019190915260059095015460a0948501528551928601519186015190860151948601519590930151919d909c50919a50919850919650945092505050565b6124c2613600565b3360009081526009602090815260408083208380529091529020548061252a5760405162461bcd60e51b815260206004820152601b60248201527f4e6f20455448206561726e696e677320746f20776974686472617700000000006044820152606401610c64565b3360008181526009602090815260408083208380529091528082208290555190919083908381818185875af1925050503d8060008114612586576040519150601f19603f3d011682016040523d82523d6000602084013e61258b565b606091505b50509050806125d45760405162461bcd60e51b8152602060048201526015602482015274115512081dda5d1a191c985dd85b0819985a5b1959605a1b6044820152606401610c64565b6040805183815260006020820152339160008051602061425d833981519152910160405180910390a25050610d8e6001600055565b80600060078260405161261c9190613e4c565b908152604051908190036020019020805461263690613df9565b9050116126555760405162461bcd60e51b8152600401610c6490613ef1565b81336001600160a01b03166007826040516126709190613e4c565b908152604051908190036020019020600101546001600160a01b0316146126a95760405162461bcd60e51b8152600401610c64906140ad565b60006007846040516126bb9190613e4c565b908152604051908190036020018120600401805492151560ff199093169290921790915533906126ec908590613e4c565b604051908190038120907f6f94c96ce1576b8ba3d9866aa680bb233f89e672d999a75a8f6a26f098549f1090600090a3505050565b805160208183018101805160078252928201919093012091528054819061274790613df9565b80601f016020809104026020016040519081016040528092919081815260200182805461277390613df9565b80156127c05780601f10612795576101008083540402835291602001916127c0565b820191906000526020600020905b8154815290600101906020018083116127a357829003601f168201915b50505050600183015460028401546003850154600486015460059096015494956001600160a01b03909316949193509160ff169086565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461283f5760405162461bcd60e51b8152600401610c6490613e68565b6103e88111156128895760405162461bcd60e51b81526020600482015260156024820152744665652063616e6e6f74206578636565642031302560581b6044820152606401610c64565b600380549082905560408051828152602081018490527fd347e206f25a89b917fc9482f1a2d294d749baa4dc9bde7fb495ee11fe491643910160405180910390a15050565b60008151116129155760405162461bcd60e51b815260206004820152601360248201527255524c2063616e6e6f7420626520656d70747960681b6044820152606401610c64565b6007816040516129259190613e4c565b908152604051908190036020019020805461293f90613df9565b15905061298e5760405162461bcd60e51b815260206004820152601a60248201527f436f6e74656e7420616c726561647920726567697374657265640000000000006044820152606401610c64565b6040805160c08101825282815233602082015260008183018190526060820152600160808201524260a082015290516007906129cb908490613e4c565b908152604051908190036020019020815181906129e89082613fee565b50602082810151600183810180546001600160a01b0319166001600160a01b0390931692909217909155604080850151600285015560608501516003850155608085015160048501805460ff191691151591909117905560a0909401516005909301929092553360009081526008825292832080549283018155835290912001612a728282613fee565b5060018054906000612a8383613e33565b90915550506040513390612a98908390613e4c565b604051908190038120428252907f228c65a7f785ca93694858b57fcb2e7db07a5ee9e0a7e642452f4684cd91b25c9060200160405180910390a350565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612b1d5760405162461bcd60e51b8152600401610c6490613e68565b612b25613600565b478015612bed5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114612b99576040519150601f19603f3d011682016040523d82523d6000602084013e612b9e565b606091505b5050905080612beb5760405162461bcd60e51b815260206004820152601960248201527811551208199959481dda5d1a191c985dd85b0819985a5b1959603a1b6044820152606401610c64565b505b60005b600654811015610d8257600060068281548110612c0f57612c0f613de3565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015612c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c869190613ed8565b90508015612cc257612cc26001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000008361362a565b50508080612ccf90613e33565b915050612bf0565b806000600782604051612cea9190613e4c565b9081526040519081900360200190208054612d0490613df9565b905011612d235760405162461bcd60e51b8152600401610c6490613ef1565b81336001600160a01b0316600782604051612d3e9190613e4c565b908152604051908190036020019020600101546001600160a01b031614612d775760405162461bcd60e51b8152600401610c64906140ad565b6001600784604051612d899190613e4c565b908152604051908190036020018120600401805492151560ff19909316929092179091553390612dba908590613e4c565b604051908190038120907f658d8181c686f564d44cc5e8c2dc71775c9a180e1f19112c92877677b4106ef190600090a3505050565b6060806006805480602002602001604051908101604052809291908181526020018280548015612e4857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e2a575b505060065493955050506001600160401b038211159050612e6b57612e6b613a41565b604051908082528060200260200182016040528015612e9e57816020015b6060815260200190600190039081612e895790505b50905060005b600654811015612fa2576005600060068381548110612ec557612ec5613de3565b60009182526020808320909101546001600160a01b0316835282019290925260400190208054612ef490613df9565b80601f0160208091040260200160405190810160405280929190818152602001828054612f2090613df9565b8015612f6d5780601f10612f4257610100808354040283529160200191612f6d565b820191906000526020600020905b815481529060010190602001808311612f5057829003601f168201915b5050505050828281518110612f8457612f84613de3565b60200260200101819052508080612f9a90613e33565b915050612ea4565b509091565b826000600782604051612fba9190613e4c565b9081526040519081900360200190208054612fd490613df9565b905011612ff35760405162461bcd60e51b8152600401610c6490613ef1565b836007816040516130049190613e4c565b9081526040519081900360200190206004015460ff1661305e5760405162461bcd60e51b8152602060048201526015602482015274436f6e74656e74206973206e6f742061637469766560581b6044820152606401610c64565b613066613600565b600083116130865760405162461bcd60e51b8152600401610c6490613f21565b6001600160a01b03841660009081526004602052604090205460ff166130be5760405162461bcd60e51b8152600401610c6490613eab565b60006007866040516130d09190613e4c565b90815260405190819003602001902090506130f66001600160a01b03861633308761368e565b6000612710600354866131099190613f67565b6131139190613f7e565b905060006131218287613e98565b9050808360020160008282546131379190613dd0565b909155505060038301805490600061314e83613e33565b909155505060018301546001600160a01b039081166000908152600960209081526040808320938b168352929052908120805483929061318f908490613dd0565b9091555050336000908152600a602090815260408083206001600160a01b038b168452909152812080548892906131c7908490613dd0565b925050819055506040518060c00160405280336001600160a01b031681526020018460010160009054906101000a90046001600160a01b03166001600160a01b03168152602001878152602001428152602001898152602001886001600160a01b0316815250600b6000600254815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040190816132c59190613fee565b5060a09190910151600590910180546001600160a01b0319166001600160a01b03909216919091179055604051600c90613300908a90613e4c565b908152604051602091819003820190206002805482546001810184556000938452938320909301929092558154919061333883613e33565b91905055508760405161334b9190613e4c565b6040519081900390206001808501546002546001600160a01b039091169133917fb5d59b7dcecbfa44be93adbd36abc3d5d92b159a3dff85ecc32080511a906f7d918b916133999190613e98565b60408051928352602083019190915242908201526001600160a01b038c16606082015260800160405180910390a45050506133d46001600055565b5050505050565b6000818152600b60209081526040808320815160c08101835281546001600160a01b03908116825260018301541693810193909352600281015491830191909152600381015460608381019190915260048201805485948594859493859384939291608084019161344b90613df9565b80601f016020809104026020016040519081016040528092919081815260200182805461347790613df9565b80156134c45780601f10613499576101008083540402835291602001916134c4565b820191906000526020600020905b8154815290600101906020018083116134a757829003601f168201915b5050509183525050600591909101546001600160a01b031660209182015281519082015160408301516060840151608085015160a090950151939d929c50909a509850919650945092505050565b600b60205260009081526040902080546001820154600283015460038401546004850180546001600160a01b039586169694909516949293919261355590613df9565b80601f016020809104026020016040519081016040528092919081815260200182805461358190613df9565b80156135ce5780601f106135a3576101008083540402835291602001916135ce565b820191906000526020600020905b8154815290600101906020018083116135b157829003601f168201915b505050600590930154919250506001600160a01b031686565b6005602052600090815260409020805461111b90613df9565b60026000540361362357604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b0383811660248301526044820183905261368991859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506136cd565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526136c79186918216906323b872dd90608401613657565b50505050565b60006136e26001600160a01b03841683613730565b90508051600014158015613707575080806020019051810190613705919061423a565b155b1561368957604051635274afe760e01b81526001600160a01b0384166004820152602401610c64565b606061373e83836000613745565b9392505050565b60608147101561376a5760405163cd78605960e01b8152306004820152602401610c64565b600080856001600160a01b031684866040516137869190613e4c565b60006040518083038185875af1925050503d80600081146137c3576040519150601f19603f3d011682016040523d82523d6000602084013e6137c8565b606091505b50915091506137d88683836137e2565b9695505050505050565b6060826137f7576137f28261383e565b61373e565b815115801561380e57506001600160a01b0384163b155b1561383757604051639996b31560e01b81526001600160a01b0385166004820152602401610c64565b508061373e565b80511561384e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50805461387390613df9565b6000825580601f10613883575050565b601f0160209004906000526020600020908101906110e091905b808211156138b1576000815560010161389d565b5090565b80356001600160a01b03811681146138cc57600080fd5b919050565b6000602082840312156138e357600080fd5b61373e826138b5565b600081518084526020808501945080840160005b838110156139255781516001600160a01b031687529582019590820190600101613900565b509495945050505050565b600081518084526020808501945080840160005b8381101561392557815187529582019590820190600101613944565b60005b8381101561397b578181015183820152602001613963565b50506000910152565b6000815180845261399c816020860160208601613960565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b848110156139fb57601f198684030189526139e9838351613984565b988401989250908301906001016139cd565b5090979650505050505050565b606081526000613a1b60608301866138ec565b8281036020840152613a2d8186613930565b905082810360408401526137d881856139b0565b634e487b7160e01b600052604160045260246000fd5b600082601f830112613a6857600080fd5b81356001600160401b0380821115613a8257613a82613a41565b604051601f8301601f19908116603f01168101908282118183101715613aaa57613aaa613a41565b81604052838152866020858801011115613ac357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215613af557600080fd5b81356001600160401b03811115613b0b57600080fd5b613b1784828501613a57565b949350505050565b60208152600061373e6020830184613930565b60008060408385031215613b4557600080fd5b82356001600160401b03811115613b5b57600080fd5b613b6785828601613a57565b95602094909401359450505050565b600060208284031215613b8857600080fd5b5035919050565b60008060408385031215613ba257600080fd5b613bab836138b5565b946020939093013593505050565b60208152600061373e6020830184613984565b60208152600061373e60208301846139b0565b60008060408385031215613bf257600080fd5b82356001600160401b03811115613c0857600080fd5b613c1485828601613a57565b925050613c23602084016138b5565b90509250929050565b60008060408385031215613c3f57600080fd5b613c48836138b5565b915060208301356001600160401b03811115613c6357600080fd5b613c6f85828601613a57565b9150509250929050565b60c081526000613c8c60c0830189613984565b6001600160a01b0397909716602083015250604081019490945260608401929092521515608083015260a090910152919050565b60008060408385031215613cd357600080fd5b613cdc836138b5565b9150613c23602084016138b5565b604081526000613cfd60408301856138ec565b8281036020840152613d0f81856139b0565b95945050505050565b600080600060608486031215613d2d57600080fd5b83356001600160401b03811115613d4357600080fd5b613d4f86828701613a57565b935050613d5e602085016138b5565b9150604084013590509250925092565b600060018060a01b038089168352808816602084015286604084015285606084015260c06080840152613da460c0840186613984565b915080841660a084015250979650505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610f2c57610f2c613dba565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680613e0d57607f821691505b602082108103613e2d57634e487b7160e01b600052602260045260246000fd5b50919050565b600060018201613e4557613e45613dba565b5060010190565b60008251613e5e818460208701613960565b9190910192915050565b6020808252601690820152752737ba103a34329031b7b73a3930b1ba1037bbb732b960511b604082015260600190565b81810381811115610f2c57610f2c613dba565b602080825260139082015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b604082015260600190565b600060208284031215613eea57600080fd5b5051919050565b60208082526016908201527510dbdb9d195b9d08191bd95cc81b9bdd08195e1a5cdd60521b604082015260600190565b60208082526026908201527f446f6e6174696f6e20616d6f756e74206d75737420626520677265617465722060408201526507468616e20360d41b606082015260800190565b8082028115828204841417610f2c57610f2c613dba565b600082613f9b57634e487b7160e01b600052601260045260246000fd5b500490565b601f82111561368957600081815260208120601f850160051c81016020861015613fc75750805b601f850160051c820191505b81811015613fe657828155600101613fd3565b505050505050565b81516001600160401b0381111561400757614007613a41565b61401b816140158454613df9565b84613fa0565b602080601f83116001811461405057600084156140385750858301515b600019600386901b1c1916600185901b178555613fe6565b600085815260208120601f198616915b8281101561407f57888601518255948401946001909101908401614060565b508582101561409d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601590820152742737ba103a34329031b7b73a32b73a1037bbb732b960591b604082015260600190565b60008083546140ea81613df9565b60018281168015614102576001811461411757614146565b60ff1984168752821515830287019450614146565b8760005260208060002060005b8581101561413d5781548a820152908401908201614124565b50505082870194505b50929695505050505050565b81810361415d575050565b6141678254613df9565b6001600160401b0381111561417e5761417e613a41565b61418c816140158454613df9565b6000601f8211600181146141c057600083156141a85750848201545b600019600385901b1c1916600184901b1784556133d4565b600085815260209020601f19841690600086815260209020845b838110156141fa57828601548255600195860195909101906020016141da565b508583101561409d5793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561424c57600080fd5b8151801515811461373e57600080fdfe565848cdb1369b8f0e5b0f6eb298a192163a96cf9f692903ec5f14cd2c0b7b65a2646970667358221220bb1dba0e357ebdb3ec91892791bac083337014f711088c4acaa1815501f5a33464736f6c63430008140033",
    "deployedBytecode": "0x6080604052600436106102275760003560e01c80637e87addf11610122578063b8bc7b0e116100a5578063d866dc9d1161006c578063d866dc9d14610766578063de2ed8931461079e578063ef07a81f146107b4578063f8626af8146107e6578063fb0b2b361461080657005b8063b8bc7b0e146106ba578063bb55ba08146106cf578063ce606ee0146106ef578063d3c7c2c714610723578063d6f2bdcb1461074657005b80639b3d24ee116100e95780639b3d24ee146105dc578063a6acce3514610622578063aa0b598814610642578063ac4d9cb214610662578063b0825df31461068257005b80637e87addf1461050f5780638c9e1f3c1461052f578063935de851146105615780639881b46b1461057657806399cd0468146105bc57005b80633848627b116101aa5780635d95b93d116101715780635d95b93d1461046a57806368c4ac261461047f57806368ea48e6146104af578063720138e8146104cf57806376319190146104ef57005b80633848627b146103c7578063401a9685146103dd578063403747331461040a57806342c17e8f146104375780635573bd931461044a57005b80631c784c2a116101ee5780631c784c2a1461030b57806323ccdef91461033957806326232a2e146103595780632b60c8221461036f57806331256666146103a757005b806305cbf0b2146102305780630f9ad7271461026857806310c6f57c14610298578063136d8883146102c557806318dc0812146102f657005b3661022e57005b005b34801561023c57600080fd5b5061025061024b3660046138d1565b610826565b60405161025f93929190613a08565b60405180910390f35b34801561027457600080fd5b50610288610283366004613ae3565b610b75565b604051901515815260200161025f565b3480156102a457600080fd5b506102b86102b3366004613ae3565b610bac565b60405161025f9190613b1f565b3480156102d157600080fd5b506001546002546003546040805193845260208401929092529082015260600161025f565b34801561030257600080fd5b5061022e610c1c565b34801561031757600080fd5b5061032b610326366004613b32565b610d90565b60405190815260200161025f565b34801561034557600080fd5b506102b8610354366004613b32565b610dd0565b34801561036557600080fd5b5061032b60035481565b34801561037b57600080fd5b5061038f61038a366004613b76565b610f32565b6040516001600160a01b03909116815260200161025f565b3480156103b357600080fd5b5061022e6103c23660046138d1565b610f5c565b3480156103d357600080fd5b5061032b60015481565b3480156103e957600080fd5b506103fd6103f8366004613b8f565b6110e3565b60405161025f9190613bb9565b34801561041657600080fd5b5061042a6104253660046138d1565b61119c565b60405161025f9190613bcc565b61022e610445366004613ae3565b61128b565b34801561045657600080fd5b5061022e610465366004613bdf565b6115f1565b34801561047657600080fd5b5061022e6118ed565b34801561048b57600080fd5b5061028861049a3660046138d1565b60046020526000908152604090205460ff1681565b3480156104bb57600080fd5b506102506104ca3660046138d1565b611b13565b3480156104db57600080fd5b5061022e6104ea366004613c2c565b611e5a565b3480156104fb57600080fd5b5061022e61050a3660046138d1565b612065565b34801561051b57600080fd5b5061022e61052a3660046138d1565b612258565b34801561053b57600080fd5b5061054f61054a366004613ae3565b612376565b60405161025f96959493929190613c79565b34801561056d57600080fd5b5061022e6124ba565b34801561058257600080fd5b5061032b610591366004613cc0565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b3480156105c857600080fd5b5061022e6105d7366004613ae3565b612609565b3480156105e857600080fd5b5061032b6105f7366004613cc0565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b34801561062e57600080fd5b5061054f61063d366004613ae3565b612721565b34801561064e57600080fd5b5061022e61065d366004613b76565b6127f7565b34801561066e57600080fd5b5061022e61067d366004613ae3565b6128ce565b34801561068e57600080fd5b5061032b61069d366004613cc0565b600a60209081526000928352604080842090915290825290205481565b3480156106c657600080fd5b5061022e612ad5565b3480156106db57600080fd5b5061022e6106ea366004613ae3565b612cd7565b3480156106fb57600080fd5b5061038f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561072f57600080fd5b50610738612def565b60405161025f929190613cea565b34801561075257600080fd5b5061022e610761366004613d18565b612fa7565b34801561077257600080fd5b5061032b610781366004613cc0565b600960209081526000928352604080842090915290825290205481565b3480156107aa57600080fd5b5061032b60025481565b3480156107c057600080fd5b506107d46107cf366004613b76565b6133db565b60405161025f96959493929190613d6e565b3480156107f257600080fd5b506107d4610801366004613b76565b613512565b34801561081257600080fd5b506103fd6108213660046138d1565b6135e7565b6006546060908190819061083b906001613dd0565b6001600160401b0381111561085257610852613a41565b60405190808252806020026020018201604052801561087b578160200160208202803683370190505b5060065490935061088d906001613dd0565b6001600160401b038111156108a4576108a4613a41565b6040519080825280602002602001820160405280156108cd578160200160208202803683370190505b506006549092506108df906001613dd0565b6001600160401b038111156108f6576108f6613a41565b60405190808252806020026020018201604052801561092957816020015b60608152602001906001900390816109145790505b50905060008360008151811061094157610941613de3565b6001600160a01b0392831660209182029290920181019190915290851660009081526009825260408082208280529092529081205483519091849161098857610988613de3565b6020026020010181815250506040518060400160405280600381526020016208aa8960eb1b815250816000815181106109c3576109c3613de3565b602002602001018190525060005b600654811015610b6d576000600682815481106109f0576109f0613de3565b6000918252602090912001546001600160a01b031690508085610a14846001613dd0565b81518110610a2457610a24613de3565b6001600160a01b039283166020918202929092018101919091528782166000908152600982526040808220938516825292909152205484610a66846001613dd0565b81518110610a7657610a76613de3565b60200260200101818152505060056000826001600160a01b03166001600160a01b031681526020019081526020016000208054610ab290613df9565b80601f0160208091040260200160405190810160405280929190818152602001828054610ade90613df9565b8015610b2b5780601f10610b0057610100808354040283529160200191610b2b565b820191906000526020600020905b815481529060010190602001808311610b0e57829003601f168201915b505050505083836001610b3e9190613dd0565b81518110610b4e57610b4e613de3565b6020026020010181905250508080610b6590613e33565b9150506109d1565b509193909250565b600080600783604051610b889190613e4c565b9081526040519081900360200190208054610ba290613df9565b9050119050919050565b6060600c82604051610bbe9190613e4c565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015610c1057602002820191906000526020600020905b815481526020019060010190808311610bfc575b50505050509050919050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c6d5760405162461bcd60e51b8152600401610c6490613e68565b60405180910390fd5b610c75613600565b4780610cc35760405162461bcd60e51b815260206004820152601760248201527f4e6f20455448206665657320746f2077697468647261770000000000000000006044820152606401610c64565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d30576040519150601f19603f3d011682016040523d82523d6000602084013e610d35565b606091505b5050905080610d825760405162461bcd60e51b815260206004820152601960248201527811551208199959481dda5d1a191c985dd85b0819985a5b1959603a1b6044820152606401610c64565b5050610d8e6001600055565b565b8151602081840181018051600c825292820191850191909120919052805482908110610dbb57600080fd5b90600052602060002001600091509150505481565b60606000600c84604051610de49190613e4c565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015610e3657602002820191906000526020600020905b815481526020019060010190808311610e22575b5050505050905060008151905080600003610e635750506040805160008152602081019091529050610f2c565b6000818511610e725784610e74565b815b90506000816001600160401b03811115610e9057610e90613a41565b604051908082528060200260200182016040528015610eb9578160200160208202803683370190505b50905060005b82811015610f25578481610ed4600187613e98565b610ede9190613e98565b81518110610eee57610eee613de3565b6020026020010151828281518110610f0857610f08613de3565b602090810291909101015280610f1d81613e33565b915050610ebf565b5093505050505b92915050565b60068181548110610f4257600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fa45760405162461bcd60e51b8152600401610c6490613e68565b610fac613600565b6001600160a01b03811660009081526004602052604090205460ff16610fe45760405162461bcd60e51b8152600401610c6490613eab565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f9190613ed8565b9050600081116110a15760405162461bcd60e51b815260206004820152601960248201527f4e6f20746f6b656e206665657320746f207769746864726177000000000000006044820152606401610c64565b6110d56001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000008361362a565b506110e06001600055565b50565b600860205281600052604060002081815481106110ff57600080fd5b9060005260206000200160009150915050805461111b90613df9565b80601f016020809104026020016040519081016040528092919081815260200182805461114790613df9565b80156111945780601f1061116957610100808354040283529160200191611194565b820191906000526020600020905b81548152906001019060200180831161117757829003601f168201915b505050505081565b6001600160a01b0381166000908152600860209081526040808320805482518185028101850190935280835260609492939192909184015b828210156112805783829060005260206000200180546111f390613df9565b80601f016020809104026020016040519081016040528092919081815260200182805461121f90613df9565b801561126c5780601f106112415761010080835404028352916020019161126c565b820191906000526020600020905b81548152906001019060200180831161124f57829003601f168201915b5050505050815260200190600101906111d4565b505050509050919050565b80600060078260405161129e9190613e4c565b90815260405190819003602001902080546112b890613df9565b9050116112d75760405162461bcd60e51b8152600401610c6490613ef1565b816007816040516112e89190613e4c565b9081526040519081900360200190206004015460ff166113425760405162461bcd60e51b8152602060048201526015602482015274436f6e74656e74206973206e6f742061637469766560581b6044820152606401610c64565b600034116113625760405162461bcd60e51b8152600401610c6490613f21565b60006007846040516113749190613e4c565b908152602001604051809103902090506000612710600354346113979190613f67565b6113a19190613f7e565b905060006113af8234613e98565b9050808360020160008282546113c59190613dd0565b90915550506003830180549060006113dc83613e33565b909155505060018301546001600160a01b0316600090815260096020908152604080832083805290915281208054839290611418908490613dd0565b9091555050336000908152600a6020908152604080832083805290915281208054349290611447908490613dd0565b90915550506040805160c0810182523381526001858101546001600160a01b039081166020808501918252348587019081524260608701908152608087018e8152600060a08901819052600280548252600b90955298909820875181546001600160a01b031990811691881691909117825594519681018054909516969095169590951790925590519082015590516003820155915190919060048201906114ef9082613fee565b5060a09190910151600590910180546001600160a01b0319166001600160a01b03909216919091179055604051600c9061152a908890613e4c565b908152604051602091819003820190206002805482546001810184556000938452938320909301929092558154919061156283613e33565b9190505550856040516115759190613e4c565b6040519081900390206001808501546002546001600160a01b039091169133917fb5d59b7dcecbfa44be93adbd36abc3d5d92b159a3dff85ecc32080511a906f7d9134916115c39190613e98565b60408051928352602083019190915242908201526000606082015260800160405180910390a4505050505050565b8160006007826040516116049190613e4c565b908152604051908190036020019020805461161e90613df9565b90501161163d5760405162461bcd60e51b8152600401610c6490613ef1565b82336001600160a01b03166007826040516116589190613e4c565b908152604051908190036020019020600101546001600160a01b0316146116915760405162461bcd60e51b8152600401610c64906140ad565b6001600160a01b0383166116e75760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206e6577206f776e65722061646472657373000000000000006044820152606401610c64565b6007846040516116f79190613e4c565b908152604051908190036020019020600101546001600160a01b03908116908416036117525760405162461bcd60e51b815260206004820152600a60248201526929b0b6b29037bbb732b960b11b6044820152606401610c64565b60006007856040516117649190613e4c565b908152604051908190036020018120600101546001600160a01b031691508490600790611792908890613e4c565b908152604080516020928190038301902060010180546001600160a01b0319166001600160a01b0394851617905591831660009081526008909152908120905b81548110156118b15786805190602001208282815481106117f5576117f5613de3565b9060005260206000200160405161180c91906140dc565b60405180910390200361189f578154829061182990600190613e98565b8154811061183957611839613de3565b9060005260206000200182828154811061185557611855613de3565b90600052602060002001908161186b9190614152565b508180548061187c5761187c614224565b6001900381819060005260206000200160006118989190613867565b90556118b1565b806118a981613e33565b9150506117d2565b506001600160a01b0385166000908152600860209081526040822080546001810182559083529120016118e48782613fee565b50505050505050565b6118f5613600565b33600090815260096020908152604080832083805290915281205480156119ef573360008181526009602090815260408083208380529091528082208290555190919083908381818185875af1925050503d8060008114611972576040519150601f19603f3d011682016040523d82523d6000602084013e611977565b606091505b50509050806119c05760405162461bcd60e51b8152602060048201526015602482015274115512081dda5d1a191c985dd85b0819985a5b1959605a1b6044820152606401610c64565b6040805183815260006020820152339160008051602061425d833981519152910160405180910390a260019250505b60005b600654811015611ac557600060068281548110611a1157611a11613de3565b60009182526020808320909101543383526009825260408084206001600160a01b03909216808552919092529120549091508015611ab0573360008181526009602090815260408083206001600160a01b0387168085529252822091909155611a7a918361362a565b604080518281526001600160a01b0384166020820152339160008051602061425d833981519152910160405180910390a2600194505b50508080611abd90613e33565b9150506119f2565b5081610d825760405162461bcd60e51b815260206004820152601760248201527f4e6f206561726e696e677320746f2077697468647261770000000000000000006044820152606401610c64565b60065460609081908190611b28906001613dd0565b6001600160401b03811115611b3f57611b3f613a41565b604051908082528060200260200182016040528015611b68578160200160208202803683370190505b50600654909350611b7a906001613dd0565b6001600160401b03811115611b9157611b91613a41565b604051908082528060200260200182016040528015611bba578160200160208202803683370190505b50600654909250611bcc906001613dd0565b6001600160401b03811115611be357611be3613a41565b604051908082528060200260200182016040528015611c1657816020015b6060815260200190600190039081611c015790505b509050600083600081518110611c2e57611c2e613de3565b6001600160a01b039283166020918202929092018101919091529085166000908152600a8252604080822082805290925290812054835190918491611c7557611c75613de3565b6020026020010181815250506040518060400160405280600381526020016208aa8960eb1b81525081600081518110611cb057611cb0613de3565b602002602001018190525060005b600654811015610b6d57600060068281548110611cdd57611cdd613de3565b6000918252602090912001546001600160a01b031690508085611d01846001613dd0565b81518110611d1157611d11613de3565b6001600160a01b039283166020918202929092018101919091528782166000908152600a82526040808220938516825292909152205484611d53846001613dd0565b81518110611d6357611d63613de3565b60200260200101818152505060056000826001600160a01b03166001600160a01b031681526020019081526020016000208054611d9f90613df9565b80601f0160208091040260200160405190810160405280929190818152602001828054611dcb90613df9565b8015611e185780601f10611ded57610100808354040283529160200191611e18565b820191906000526020600020905b815481529060010190602001808311611dfb57829003601f168201915b505050505083836001611e2b9190613dd0565b81518110611e3b57611e3b613de3565b6020026020010181905250508080611e5290613e33565b915050611cbe565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611ea25760405162461bcd60e51b8152600401610c6490613e68565b6001600160a01b038216611ef05760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610c64565b6001600160a01b03821660009081526004602052604090205460ff1615611f595760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616c726561647920737570706f727465640000000000000000006044820152606401610c64565b6000815111611fa35760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b6044820152606401610c64565b6001600160a01b0382166000908152600460209081526040808320805460ff1916600117905560059091529020611fda8282613fee565b50600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0384169081179091556040517f7afee0f1b802cc0f66c67890e26b4566251859cf2cd8de79b86aed7251d9756a90612059908490613bb9565b60405180910390a25050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146120ad5760405162461bcd60e51b8152600401610c6490613e68565b6001600160a01b03811660009081526004602052604090205460ff166120e55760405162461bcd60e51b8152600401610c6490613eab565b6001600160a01b0381166000908152600460209081526040808320805460ff191690556005909152812061211891613867565b60005b60065481101561222057816001600160a01b03166006828154811061214257612142613de3565b6000918252602090912001546001600160a01b03160361220e576006805461216c90600190613e98565b8154811061217c5761217c613de3565b600091825260209091200154600680546001600160a01b0390921691839081106121a8576121a8613de3565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060068054806121e7576121e7614224565b600082815260209020810160001990810180546001600160a01b0319169055019055612220565b8061221881613e33565b91505061211b565b506040516001600160a01b038216907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a250565b612260613600565b6001600160a01b03811660009081526004602052604090205460ff166122985760405162461bcd60e51b8152600401610c6490613eab565b3360009081526009602090815260408083206001600160a01b0385168452909152902054806123095760405162461bcd60e51b815260206004820152601d60248201527f4e6f20746f6b656e206561726e696e677320746f2077697468647261770000006044820152606401610c64565b3360008181526009602090815260408083206001600160a01b038716808552925282209190915561233a918361362a565b604080518281526001600160a01b0384166020820152339160008051602061425d833981519152910160405180910390a2506110e06001600055565b60606000806000806000806007886040516123919190613e4c565b90815260200160405180910390206040518060c00160405290816000820180546123ba90613df9565b80601f01602080910402602001604051908101604052809291908181526020018280546123e690613df9565b80156124335780601f1061240857610100808354040283529160200191612433565b820191906000526020600020905b81548152906001019060200180831161241657829003601f168201915b505050918352505060018201546001600160a01b031660208083019190915260028301546040808401919091526003840154606080850191909152600485015460ff16151560808086019190915260059095015460a0948501528551928601519186015190860151948601519590930151919d909c50919a50919850919650945092505050565b6124c2613600565b3360009081526009602090815260408083208380529091529020548061252a5760405162461bcd60e51b815260206004820152601b60248201527f4e6f20455448206561726e696e677320746f20776974686472617700000000006044820152606401610c64565b3360008181526009602090815260408083208380529091528082208290555190919083908381818185875af1925050503d8060008114612586576040519150601f19603f3d011682016040523d82523d6000602084013e61258b565b606091505b50509050806125d45760405162461bcd60e51b8152602060048201526015602482015274115512081dda5d1a191c985dd85b0819985a5b1959605a1b6044820152606401610c64565b6040805183815260006020820152339160008051602061425d833981519152910160405180910390a25050610d8e6001600055565b80600060078260405161261c9190613e4c565b908152604051908190036020019020805461263690613df9565b9050116126555760405162461bcd60e51b8152600401610c6490613ef1565b81336001600160a01b03166007826040516126709190613e4c565b908152604051908190036020019020600101546001600160a01b0316146126a95760405162461bcd60e51b8152600401610c64906140ad565b60006007846040516126bb9190613e4c565b908152604051908190036020018120600401805492151560ff199093169290921790915533906126ec908590613e4c565b604051908190038120907f6f94c96ce1576b8ba3d9866aa680bb233f89e672d999a75a8f6a26f098549f1090600090a3505050565b805160208183018101805160078252928201919093012091528054819061274790613df9565b80601f016020809104026020016040519081016040528092919081815260200182805461277390613df9565b80156127c05780601f10612795576101008083540402835291602001916127c0565b820191906000526020600020905b8154815290600101906020018083116127a357829003601f168201915b50505050600183015460028401546003850154600486015460059096015494956001600160a01b03909316949193509160ff169086565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461283f5760405162461bcd60e51b8152600401610c6490613e68565b6103e88111156128895760405162461bcd60e51b81526020600482015260156024820152744665652063616e6e6f74206578636565642031302560581b6044820152606401610c64565b600380549082905560408051828152602081018490527fd347e206f25a89b917fc9482f1a2d294d749baa4dc9bde7fb495ee11fe491643910160405180910390a15050565b60008151116129155760405162461bcd60e51b815260206004820152601360248201527255524c2063616e6e6f7420626520656d70747960681b6044820152606401610c64565b6007816040516129259190613e4c565b908152604051908190036020019020805461293f90613df9565b15905061298e5760405162461bcd60e51b815260206004820152601a60248201527f436f6e74656e7420616c726561647920726567697374657265640000000000006044820152606401610c64565b6040805160c08101825282815233602082015260008183018190526060820152600160808201524260a082015290516007906129cb908490613e4c565b908152604051908190036020019020815181906129e89082613fee565b50602082810151600183810180546001600160a01b0319166001600160a01b0390931692909217909155604080850151600285015560608501516003850155608085015160048501805460ff191691151591909117905560a0909401516005909301929092553360009081526008825292832080549283018155835290912001612a728282613fee565b5060018054906000612a8383613e33565b90915550506040513390612a98908390613e4c565b604051908190038120428252907f228c65a7f785ca93694858b57fcb2e7db07a5ee9e0a7e642452f4684cd91b25c9060200160405180910390a350565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612b1d5760405162461bcd60e51b8152600401610c6490613e68565b612b25613600565b478015612bed5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114612b99576040519150601f19603f3d011682016040523d82523d6000602084013e612b9e565b606091505b5050905080612beb5760405162461bcd60e51b815260206004820152601960248201527811551208199959481dda5d1a191c985dd85b0819985a5b1959603a1b6044820152606401610c64565b505b60005b600654811015610d8257600060068281548110612c0f57612c0f613de3565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015612c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c869190613ed8565b90508015612cc257612cc26001600160a01b0383167f00000000000000000000000000000000000000000000000000000000000000008361362a565b50508080612ccf90613e33565b915050612bf0565b806000600782604051612cea9190613e4c565b9081526040519081900360200190208054612d0490613df9565b905011612d235760405162461bcd60e51b8152600401610c6490613ef1565b81336001600160a01b0316600782604051612d3e9190613e4c565b908152604051908190036020019020600101546001600160a01b031614612d775760405162461bcd60e51b8152600401610c64906140ad565b6001600784604051612d899190613e4c565b908152604051908190036020018120600401805492151560ff19909316929092179091553390612dba908590613e4c565b604051908190038120907f658d8181c686f564d44cc5e8c2dc71775c9a180e1f19112c92877677b4106ef190600090a3505050565b6060806006805480602002602001604051908101604052809291908181526020018280548015612e4857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e2a575b505060065493955050506001600160401b038211159050612e6b57612e6b613a41565b604051908082528060200260200182016040528015612e9e57816020015b6060815260200190600190039081612e895790505b50905060005b600654811015612fa2576005600060068381548110612ec557612ec5613de3565b60009182526020808320909101546001600160a01b0316835282019290925260400190208054612ef490613df9565b80601f0160208091040260200160405190810160405280929190818152602001828054612f2090613df9565b8015612f6d5780601f10612f4257610100808354040283529160200191612f6d565b820191906000526020600020905b815481529060010190602001808311612f5057829003601f168201915b5050505050828281518110612f8457612f84613de3565b60200260200101819052508080612f9a90613e33565b915050612ea4565b509091565b826000600782604051612fba9190613e4c565b9081526040519081900360200190208054612fd490613df9565b905011612ff35760405162461bcd60e51b8152600401610c6490613ef1565b836007816040516130049190613e4c565b9081526040519081900360200190206004015460ff1661305e5760405162461bcd60e51b8152602060048201526015602482015274436f6e74656e74206973206e6f742061637469766560581b6044820152606401610c64565b613066613600565b600083116130865760405162461bcd60e51b8152600401610c6490613f21565b6001600160a01b03841660009081526004602052604090205460ff166130be5760405162461bcd60e51b8152600401610c6490613eab565b60006007866040516130d09190613e4c565b90815260405190819003602001902090506130f66001600160a01b03861633308761368e565b6000612710600354866131099190613f67565b6131139190613f7e565b905060006131218287613e98565b9050808360020160008282546131379190613dd0565b909155505060038301805490600061314e83613e33565b909155505060018301546001600160a01b039081166000908152600960209081526040808320938b168352929052908120805483929061318f908490613dd0565b9091555050336000908152600a602090815260408083206001600160a01b038b168452909152812080548892906131c7908490613dd0565b925050819055506040518060c00160405280336001600160a01b031681526020018460010160009054906101000a90046001600160a01b03166001600160a01b03168152602001878152602001428152602001898152602001886001600160a01b0316815250600b6000600254815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040190816132c59190613fee565b5060a09190910151600590910180546001600160a01b0319166001600160a01b03909216919091179055604051600c90613300908a90613e4c565b908152604051602091819003820190206002805482546001810184556000938452938320909301929092558154919061333883613e33565b91905055508760405161334b9190613e4c565b6040519081900390206001808501546002546001600160a01b039091169133917fb5d59b7dcecbfa44be93adbd36abc3d5d92b159a3dff85ecc32080511a906f7d918b916133999190613e98565b60408051928352602083019190915242908201526001600160a01b038c16606082015260800160405180910390a45050506133d46001600055565b5050505050565b6000818152600b60209081526040808320815160c08101835281546001600160a01b03908116825260018301541693810193909352600281015491830191909152600381015460608381019190915260048201805485948594859493859384939291608084019161344b90613df9565b80601f016020809104026020016040519081016040528092919081815260200182805461347790613df9565b80156134c45780601f10613499576101008083540402835291602001916134c4565b820191906000526020600020905b8154815290600101906020018083116134a757829003601f168201915b5050509183525050600591909101546001600160a01b031660209182015281519082015160408301516060840151608085015160a090950151939d929c50909a509850919650945092505050565b600b60205260009081526040902080546001820154600283015460038401546004850180546001600160a01b039586169694909516949293919261355590613df9565b80601f016020809104026020016040519081016040528092919081815260200182805461358190613df9565b80156135ce5780601f106135a3576101008083540402835291602001916135ce565b820191906000526020600020905b8154815290600101906020018083116135b157829003601f168201915b505050600590930154919250506001600160a01b031686565b6005602052600090815260409020805461111b90613df9565b60026000540361362357604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b0383811660248301526044820183905261368991859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506136cd565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526136c79186918216906323b872dd90608401613657565b50505050565b60006136e26001600160a01b03841683613730565b90508051600014158015613707575080806020019051810190613705919061423a565b155b1561368957604051635274afe760e01b81526001600160a01b0384166004820152602401610c64565b606061373e83836000613745565b9392505050565b60608147101561376a5760405163cd78605960e01b8152306004820152602401610c64565b600080856001600160a01b031684866040516137869190613e4c565b60006040518083038185875af1925050503d80600081146137c3576040519150601f19603f3d011682016040523d82523d6000602084013e6137c8565b606091505b50915091506137d88683836137e2565b9695505050505050565b6060826137f7576137f28261383e565b61373e565b815115801561380e57506001600160a01b0384163b155b1561383757604051639996b31560e01b81526001600160a01b0385166004820152602401610c64565b508061373e565b80511561384e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50805461387390613df9565b6000825580601f10613883575050565b601f0160209004906000526020600020908101906110e091905b808211156138b1576000815560010161389d565b5090565b80356001600160a01b03811681146138cc57600080fd5b919050565b6000602082840312156138e357600080fd5b61373e826138b5565b600081518084526020808501945080840160005b838110156139255781516001600160a01b031687529582019590820190600101613900565b509495945050505050565b600081518084526020808501945080840160005b8381101561392557815187529582019590820190600101613944565b60005b8381101561397b578181015183820152602001613963565b50506000910152565b6000815180845261399c816020860160208601613960565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b848110156139fb57601f198684030189526139e9838351613984565b988401989250908301906001016139cd565b5090979650505050505050565b606081526000613a1b60608301866138ec565b8281036020840152613a2d8186613930565b905082810360408401526137d881856139b0565b634e487b7160e01b600052604160045260246000fd5b600082601f830112613a6857600080fd5b81356001600160401b0380821115613a8257613a82613a41565b604051601f8301601f19908116603f01168101908282118183101715613aaa57613aaa613a41565b81604052838152866020858801011115613ac357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215613af557600080fd5b81356001600160401b03811115613b0b57600080fd5b613b1784828501613a57565b949350505050565b60208152600061373e6020830184613930565b60008060408385031215613b4557600080fd5b82356001600160401b03811115613b5b57600080fd5b613b6785828601613a57565b95602094909401359450505050565b600060208284031215613b8857600080fd5b5035919050565b60008060408385031215613ba257600080fd5b613bab836138b5565b946020939093013593505050565b60208152600061373e6020830184613984565b60208152600061373e60208301846139b0565b60008060408385031215613bf257600080fd5b82356001600160401b03811115613c0857600080fd5b613c1485828601613a57565b925050613c23602084016138b5565b90509250929050565b60008060408385031215613c3f57600080fd5b613c48836138b5565b915060208301356001600160401b03811115613c6357600080fd5b613c6f85828601613a57565b9150509250929050565b60c081526000613c8c60c0830189613984565b6001600160a01b0397909716602083015250604081019490945260608401929092521515608083015260a090910152919050565b60008060408385031215613cd357600080fd5b613cdc836138b5565b9150613c23602084016138b5565b604081526000613cfd60408301856138ec565b8281036020840152613d0f81856139b0565b95945050505050565b600080600060608486031215613d2d57600080fd5b83356001600160401b03811115613d4357600080fd5b613d4f86828701613a57565b935050613d5e602085016138b5565b9150604084013590509250925092565b600060018060a01b038089168352808816602084015286604084015285606084015260c06080840152613da460c0840186613984565b915080841660a084015250979650505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610f2c57610f2c613dba565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680613e0d57607f821691505b602082108103613e2d57634e487b7160e01b600052602260045260246000fd5b50919050565b600060018201613e4557613e45613dba565b5060010190565b60008251613e5e818460208701613960565b9190910192915050565b6020808252601690820152752737ba103a34329031b7b73a3930b1ba1037bbb732b960511b604082015260600190565b81810381811115610f2c57610f2c613dba565b602080825260139082015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b604082015260600190565b600060208284031215613eea57600080fd5b5051919050565b60208082526016908201527510dbdb9d195b9d08191bd95cc81b9bdd08195e1a5cdd60521b604082015260600190565b60208082526026908201527f446f6e6174696f6e20616d6f756e74206d75737420626520677265617465722060408201526507468616e20360d41b606082015260800190565b8082028115828204841417610f2c57610f2c613dba565b600082613f9b57634e487b7160e01b600052601260045260246000fd5b500490565b601f82111561368957600081815260208120601f850160051c81016020861015613fc75750805b601f850160051c820191505b81811015613fe657828155600101613fd3565b505050505050565b81516001600160401b0381111561400757614007613a41565b61401b816140158454613df9565b84613fa0565b602080601f83116001811461405057600084156140385750858301515b600019600386901b1c1916600185901b178555613fe6565b600085815260208120601f198616915b8281101561407f57888601518255948401946001909101908401614060565b508582101561409d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601590820152742737ba103a34329031b7b73a32b73a1037bbb732b960591b604082015260600190565b60008083546140ea81613df9565b60018281168015614102576001811461411757614146565b60ff1984168752821515830287019450614146565b8760005260208060002060005b8581101561413d5781548a820152908401908201614124565b50505082870194505b50929695505050505050565b81810361415d575050565b6141678254613df9565b6001600160401b0381111561417e5761417e613a41565b61418c816140158454613df9565b6000601f8211600181146141c057600083156141a85750848201545b600019600385901b1c1916600184901b1784556133d4565b600085815260209020601f19841690600086815260209020845b838110156141fa57828601548255600195860195909101906020016141da565b508583101561409d5793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561424c57600080fd5b8151801515811461373e57600080fdfe565848cdb1369b8f0e5b0f6eb298a192163a96cf9f692903ec5f14cd2c0b7b65a2646970667358221220bb1dba0e357ebdb3ec91892791bac083337014f711088c4acaa1815501f5a33464736f6c63430008140033",
    "devdoc": {
      "author": "Pisa",
      "errors": {
        "AddressEmptyCode(address)": [
          {
            "details": "There's no code at `target` (it is not a contract)."
          }
        ],
        "AddressInsufficientBalance(address)": [
          {
            "details": "The ETH balance of the account is not enough to perform the operation."
          }
        ],
        "FailedInnerCall()": [
          {
            "details": "A call to an address target failed. The target may have reverted."
          }
        ],
        "ReentrancyGuardReentrantCall()": [
          {
            "details": "Unauthorized reentrant call."
          }
        ],
        "SafeERC20FailedOperation(address)": [
          {
            "details": "An operation with an ERC20 token failed."
          }
        ]
      },
      "kind": "dev",
      "methods": {
        "addSupportedToken(address,string)": {
          "params": {
            "_symbol": "The token symbol for display purposes",
            "_token": "The token address to add"
          }
        },
        "contentExistsCheck(string)": {
          "params": {
            "_url": "The content URL to check"
          },
          "returns": {
            "_0": "bool True if content exists, false otherwise"
          }
        },
        "deactivateContent(string)": {
          "params": {
            "_url": "The content URL to deactivate"
          }
        },
        "donateToContent(string)": {
          "params": {
            "_url": "The content URL to donate to"
          }
        },
        "donateTokenToContent(string,address,uint256)": {
          "params": {
            "_amount": "The amount of tokens to donate",
            "_token": "The token address to donate",
            "_url": "The content URL to donate to"
          }
        },
        "getContent(string)": {
          "params": {
            "_url": "The content URL"
          }
        },
        "getContentDonations(string)": {
          "params": {
            "_url": "The content URL"
          }
        },
        "getCreatorAllEarnings(address)": {
          "params": {
            "_creator": "The creator's address"
          }
        },
        "getCreatorContents(address)": {
          "params": {
            "_creator": "The creator's address"
          }
        },
        "getCreatorEarnings(address,address)": {
          "params": {
            "_creator": "The creator's address",
            "_token": "The token address (address(0) for ETH)"
          }
        },
        "getDonation(uint256)": {
          "params": {
            "_donationId": "The donation ID"
          }
        },
        "getDonorAllDonations(address)": {
          "params": {
            "_donor": "The donor's address"
          }
        },
        "getDonorTotalDonations(address,address)": {
          "params": {
            "_donor": "The donor's address",
            "_token": "The token address (address(0) for ETH)"
          }
        },
        "getRecentDonations(string,uint256)": {
          "params": {
            "_url": "The content URL"
          }
        },
        "reactivateContent(string)": {
          "params": {
            "_url": "The content URL to reactivate"
          }
        },
        "registerContent(string)": {
          "params": {
            "_url": "The streaming content URL"
          }
        },
        "removeSupportedToken(address)": {
          "params": {
            "_token": "The token address to remove"
          }
        },
        "transferContentOwnership(string,address)": {
          "params": {
            "_newOwner": "The new owner address",
            "_url": "The content URL"
          }
        },
        "updatePlatformFee(uint256)": {
          "params": {
            "_newFee": "New fee in basis points (e.g., 250 = 2.5%)"
          }
        },
        "withdrawPlatformFeesToken(address)": {
          "params": {
            "_token": "The token address to withdraw fees for"
          }
        },
        "withdrawTokenEarnings(address)": {
          "params": {
            "_token": "The token address to withdraw"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addSupportedToken(address,string)": {
          "notice": "Add a supported token (only contract owner)"
        },
        "contentExistsCheck(string)": {
          "notice": "Check if content exists"
        },
        "deactivateContent(string)": {
          "notice": "Deactivate content (only by content owner)"
        },
        "donateToContent(string)": {
          "notice": "Donate to a specific content"
        },
        "donateTokenToContent(string,address,uint256)": {
          "notice": "Donate tokens to a specific content"
        },
        "getContent(string)": {
          "notice": "Get content information"
        },
        "getContentDonations(string)": {
          "notice": "Get donation IDs for a specific content"
        },
        "getCreatorAllEarnings(address)": {
          "notice": "Get creator earnings for all tokens"
        },
        "getCreatorContents(address)": {
          "notice": "Get all content URLs by a creator"
        },
        "getCreatorEarnings(address,address)": {
          "notice": "Get creator earnings for a specific token"
        },
        "getDonation(uint256)": {
          "notice": "Get donation details by ID"
        },
        "getDonorAllDonations(address)": {
          "notice": "Get donor total donations for all tokens"
        },
        "getDonorTotalDonations(address,address)": {
          "notice": "Get donor total donations for a specific token"
        },
        "getPlatformStats()": {
          "notice": "Get platform statistics"
        },
        "getRecentDonations(string,uint256)": {
          "notice": "Get top donors for a specific content (last 10 donations)"
        },
        "getSupportedTokens()": {
          "notice": "Get all supported tokens"
        },
        "reactivateContent(string)": {
          "notice": "Reactivate content (only by content owner)"
        },
        "registerContent(string)": {
          "notice": "Register a new streaming content URL"
        },
        "removeSupportedToken(address)": {
          "notice": "Remove a supported token (only contract owner)"
        },
        "transferContentOwnership(string,address)": {
          "notice": "Emergency function to transfer content ownership"
        },
        "updatePlatformFee(uint256)": {
          "notice": "Update platform fee (only contract owner)"
        },
        "withdrawAllEarnings()": {
          "notice": "Withdraw all earnings for a creator (ETH + all supported tokens)"
        },
        "withdrawAllPlatformFees()": {
          "notice": "Withdraw all platform fees (ETH + all tokens) (only contract owner)"
        },
        "withdrawEthEarnings()": {
          "notice": "Allow creators to withdraw their ETH earnings"
        },
        "withdrawPlatformFeesEth()": {
          "notice": "Withdraw platform fees in ETH (only contract owner)"
        },
        "withdrawPlatformFeesToken(address)": {
          "notice": "Withdraw platform fees in tokens (only contract owner)"
        },
        "withdrawTokenEarnings(address)": {
          "notice": "Allow creators to withdraw their token earnings"
        }
      },
      "notice": "A smart contract for streaming content donations Allows content creators to register their streaming URLs and receive donations",
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 667,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "_status",
          "offset": 0,
          "slot": "0",
          "type": "t_uint256"
        },
        {
          "astId": 743,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "totalContents",
          "offset": 0,
          "slot": "1",
          "type": "t_uint256"
        },
        {
          "astId": 746,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "totalDonations",
          "offset": 0,
          "slot": "2",
          "type": "t_uint256"
        },
        {
          "astId": 749,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "platformFee",
          "offset": 0,
          "slot": "3",
          "type": "t_uint256"
        },
        {
          "astId": 753,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "supportedTokens",
          "offset": 0,
          "slot": "4",
          "type": "t_mapping(t_address,t_bool)"
        },
        {
          "astId": 757,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "tokenSymbols",
          "offset": 0,
          "slot": "5",
          "type": "t_mapping(t_address,t_string_storage)"
        },
        {
          "astId": 760,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "supportedTokenList",
          "offset": 0,
          "slot": "6",
          "type": "t_array(t_address)dyn_storage"
        },
        {
          "astId": 791,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "contents",
          "offset": 0,
          "slot": "7",
          "type": "t_mapping(t_string_memory_ptr,t_struct(Content)773_storage)"
        },
        {
          "astId": 796,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "creatorContents",
          "offset": 0,
          "slot": "8",
          "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
        },
        {
          "astId": 802,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "creatorEarnings",
          "offset": 0,
          "slot": "9",
          "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
        },
        {
          "astId": 808,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "donorTotalDonations",
          "offset": 0,
          "slot": "10",
          "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
        },
        {
          "astId": 813,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "donations",
          "offset": 0,
          "slot": "11",
          "type": "t_mapping(t_uint256,t_struct(Donation)786_storage)"
        },
        {
          "astId": 818,
          "contract": "contracts/PisangContract.sol:PisangContract",
          "label": "contentDonations",
          "offset": 0,
          "slot": "12",
          "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_array(t_address)dyn_storage": {
          "base": "t_address",
          "encoding": "dynamic_array",
          "label": "address[]",
          "numberOfBytes": "32"
        },
        "t_array(t_string_storage)dyn_storage": {
          "base": "t_string_storage",
          "encoding": "dynamic_array",
          "label": "string[]",
          "numberOfBytes": "32"
        },
        "t_array(t_uint256)dyn_storage": {
          "base": "t_uint256",
          "encoding": "dynamic_array",
          "label": "uint256[]",
          "numberOfBytes": "32"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => string[])",
          "numberOfBytes": "32",
          "value": "t_array(t_string_storage)dyn_storage"
        },
        "t_mapping(t_address,t_bool)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => mapping(address => uint256))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_address,t_uint256)"
        },
        "t_mapping(t_address,t_string_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => string)",
          "numberOfBytes": "32",
          "value": "t_string_storage"
        },
        "t_mapping(t_address,t_uint256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
          "encoding": "mapping",
          "key": "t_string_memory_ptr",
          "label": "mapping(string => uint256[])",
          "numberOfBytes": "32",
          "value": "t_array(t_uint256)dyn_storage"
        },
        "t_mapping(t_string_memory_ptr,t_struct(Content)773_storage)": {
          "encoding": "mapping",
          "key": "t_string_memory_ptr",
          "label": "mapping(string => struct PisangContract.Content)",
          "numberOfBytes": "32",
          "value": "t_struct(Content)773_storage"
        },
        "t_mapping(t_uint256,t_struct(Donation)786_storage)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => struct PisangContract.Donation)",
          "numberOfBytes": "32",
          "value": "t_struct(Donation)786_storage"
        },
        "t_string_memory_ptr": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        },
        "t_string_storage": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        },
        "t_struct(Content)773_storage": {
          "encoding": "inplace",
          "label": "struct PisangContract.Content",
          "members": [
            {
              "astId": 762,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "url",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage"
            },
            {
              "astId": 764,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address"
            },
            {
              "astId": 766,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "totalDonationsReceived",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 768,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "donationCount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256"
            },
            {
              "astId": 770,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "isActive",
              "offset": 0,
              "slot": "4",
              "type": "t_bool"
            },
            {
              "astId": 772,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "createdAt",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "192"
        },
        "t_struct(Donation)786_storage": {
          "encoding": "inplace",
          "label": "struct PisangContract.Donation",
          "members": [
            {
              "astId": 775,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "donor",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            },
            {
              "astId": 777,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "contentOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address"
            },
            {
              "astId": 779,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "amount",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 781,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "timestamp",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256"
            },
            {
              "astId": 783,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "contentUrl",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage"
            },
            {
              "astId": 785,
              "contract": "contracts/PisangContract.sol:PisangContract",
              "label": "token",
              "offset": 0,
              "slot": "5",
              "type": "t_address"
            }
          ],
          "numberOfBytes": "192"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }